[
  {
    "title": "Swiper API",
    "url": "https://swiperjs.com/swiper-api",
    "html": "Swiper\nv11.0.7\nSearch\nâŒ˜\nK\nDocs\nResources\nPremium\nstars\nSponsors\nBecome a sponsor\nSwiper Full HTML Layout\nStyles\nCSS Styles\nLess Styles\nSCSS Styles\nInitialize Swiper\nParameters\nMethods & Properties\nEvents\nModules\nNavigation\nPagination\nScrollbar\nAutoplay\nFree Mode\nGrid\nManipulation\nParallax\nLazy Loading\nFade Effect\nCoverflow Effect\nFlip Effect\nCube Effect\nCards Effect\nCreative Effect\nThumbs\nZoom\nKeyboard Control\nMousewheel Control\nVirtual Slides\nHash Navigation\nHistory Navigation\nController\nAccessibility (a11y)\nCustom Build\nUsing JS Modules\nUsing Build Script\nTypeScript Definitions\nObservability, for the Cloud. Try all the features. No credit card required.\nads via Carbon\nSwiper API\nIf you are upgrading from Swiper 9 to Swiper 10, check out Migration Guide to Swiper 10\nSwiper Full HTML Layout\n<!-- Slider main container -->\n<div class=\"swiper\">\n  <!-- Additional required wrapper -->\n  <div class=\"swiper-wrapper\">\n    <!-- Slides -->\n    <div class=\"swiper-slide\">Slide 1</div>\n    <div class=\"swiper-slide\">Slide 2</div>\n    <div class=\"swiper-slide\">Slide 3</div>\n    ...\n  </div>\n  <!-- If we need pagination -->\n  <div class=\"swiper-pagination\"></div>\n\n  <!-- If we need navigation buttons -->\n  <div class=\"swiper-button-prev\"></div>\n  <div class=\"swiper-button-next\"></div>\n\n  <!-- If we need scrollbar -->\n  <div class=\"swiper-scrollbar\"></div>\n</div>\n\nStyles\n\nSwiper package contains different sets of CSS, Less and SCSS styles:\n\nCSS Styles\n\nCSS styles for bundle version:\n\nswiper-bundle.css - all Swiper styles including all modules styles (like Navigation, Pagination, etc.)\nswiper-bundle.min.css - same as previous but minified\n\nCSS styles for bundle version (package imports):\n\nswiper/css - all Swiper styles including all modules styles (like Navigation, Pagination, etc.)\nswiper/css/bundle - same as previous but minified\n\nCSS styles for core version and modules (package imports):\n\nswiper/css - only core Swiper styles\nswiper/css/a11y - styles required for A11y module\nswiper/css/autoplay - styles required for Autoplay module\nswiper/css/controller - styles required for Controller module\nswiper/css/effect-cards - styles required for Cards Effect module\nswiper/css/effect-coverflow - styles required for Coverflow Effect module\nswiper/css/effect-creative - styles required for Creative Effect module\nswiper/css/effect-cube - styles required for Cube Effect module\nswiper/css/effect-fade - styles required for Fade Effect module\nswiper/css/effect-flip - styles required for Flip Effect module\nswiper/css/free-mode - styles required for Free Mode module\nswiper/css/grid - styles required for Grid module\nswiper/css/hash-navigation - styles required for Hash Navigation module\nswiper/css/history - styles required for History module\nswiper/css/keyboard - styles required for Keyboard module\nswiper/css/manipulation - styles required for Manipulation module\nswiper/css/mousewheel - styles required for Mousewheel module\nswiper/css/navigation - styles required for Navigation module\nswiper/css/pagination - styles required for Pagination module\nswiper/css/parallax - styles required for Parallax module\nswiper/css/scrollbar - styles required for Scrollbar module\nswiper/css/thumbs - styles required for Thumbs module\nswiper/css/virtual - styles required for Virtual module\nswiper/css/zoom - styles required for Zoom module\nLess Styles\n\nLess styles are separate styles for core version and modules (package imports):\n\nswiper/less - only core Swiper styles\nswiper/less/bundle - all Swiper styles including all modules styles (like Navigation, Pagination, etc.)\nswiper/less/a11y - styles required for A11y module\nswiper/less/autoplay - styles required for Autoplay module\nswiper/less/controller - styles required for Controller module\nswiper/less/effect-cards - styles required for Cards Effect module\nswiper/less/effect-coverflow - styles required for Coverflow Effect module\nswiper/less/effect-creative - styles required for Creative Effect module\nswiper/less/effect-cube - styles required for Cube Effect module\nswiper/less/effect-fade - styles required for Fade Effect module\nswiper/less/effect-flip - styles required for Flip Effect module\nswiper/less/free-mode - styles required for Free Mode module\nswiper/less/grid - styles required for Grid module\nswiper/less/hash-navigation - styles required for Hash Navigation module\nswiper/less/history - styles required for History module\nswiper/less/keyboard - styles required for Keyboard module\nswiper/less/manipulation - styles required for Manipulation module\nswiper/less/mousewheel - styles required for Mousewheel module\nswiper/less/navigation - styles required for Navigation module\nswiper/less/pagination - styles required for Pagination module\nswiper/less/parallax - styles required for Parallax module\nswiper/less/scrollbar - styles required for Scrollbar module\nswiper/less/thumbs - styles required for Thumbs module\nswiper/less/virtual - styles required for Virtual module\nswiper/less/zoom - styles required for Zoom module\nSCSS Styles\n\nSCSS styles are also separate styles for core version and modules (package imports):\n\nswiper/scss - only core Swiper styles\nswiper/scss/bundle - all Swiper styles including all modules styles (like Navigation, Pagination, etc.)\nswiper/scss/a11y - styles required for A11y module\nswiper/scss/autoplay - styles required for Autoplay module\nswiper/scss/controller - styles required for Controller module\nswiper/scss/effect-cards - styles required for Cards Effect module\nswiper/scss/effect-coverflow - styles required for Coverflow Effect module\nswiper/scss/effect-creative - styles required for Creative Effect module\nswiper/scss/effect-cube - styles required for Cube Effect module\nswiper/scss/effect-fade - styles required for Fade Effect module\nswiper/scss/effect-flip - styles required for Flip Effect module\nswiper/scss/free-mode - styles required for Free Mode module\nswiper/scss/grid - styles required for Grid module\nswiper/scss/hash-navigation - styles required for Hash Navigation module\nswiper/scss/history - styles required for History module\nswiper/scss/keyboard - styles required for Keyboard module\nswiper/scss/manipulation - styles required for Manipulation module\nswiper/scss/mousewheel - styles required for Mousewheel module\nswiper/scss/navigation - styles required for Navigation module\nswiper/scss/pagination - styles required for Pagination module\nswiper/scss/parallax - styles required for Parallax module\nswiper/scss/scrollbar - styles required for Scrollbar module\nswiper/scss/thumbs - styles required for Thumbs module\nswiper/scss/virtual - styles required for Virtual module\nswiper/scss/zoom - styles required for Zoom module\nInitialize Swiper\n\nNow, when we have Swiper's HTML, we need to initialize it using the following function:\n\nnew Swiper(swiperContainer, parameters)- initialize swiper with options\n\nswiperContainer - HTMLElement or string (with CSS Selector) of swiper container HTML element. Required.\nparameters - object - object with Swiper parameters. Optional.\nMethod returns initialized Swiper instance\n\nFor example:\n\nconst swiper = new Swiper('.swiper', {\n  speed: 400,\n  spaceBetween: 100,\n});\n\n\nAfter you initialize Swiper it is possible to access to Swiper's instance on its HTMLElement. It is swiper property of Swiper's HTML container element:\n\nconst swiper = document.querySelector('.swiper').swiper;\n\n// Now you can use all slider methods like\nswiper.slideNext();\n\nParameters\n\nLet's look on list of all available parameters:\n\nName\tType\tDefault\tDescription\na11y\tany\t\t\n\nObject with a11y parameters or boolean true to enable with default settings.\n\nconst swiper = new Swiper('.swiper', {\n  a11y: {\n    prevSlideMessage: 'Previous slide',\n    nextSlideMessage: 'Next slide',\n  },\n});\n\n\nallowSlideNext\tboolean\ttrue\t\n\nSet to false to disable swiping to next slide direction (to right or bottom)\n\n\nallowSlidePrev\tboolean\ttrue\t\n\nSet to false to disable swiping to previous slide direction (to left or top)\n\n\nallowTouchMove\tboolean\ttrue\t\n\nIf false, then the only way to switch the slide is use of external API functions like slidePrev or slideNext\n\n\nautoHeight\tboolean\tfalse\t\n\nSet to true and slider wrapper will adapt its height to the height of the currently active slide\n\n\nautoplay\tany\t\t\n\nObject with autoplay parameters or boolean true to enable with default settings\n\nconst swiper = new Swiper('.swiper', {\n autoplay: {\n   delay: 5000,\n },\n});\n\n\nbreakpoints\tobject\t\t\n\nAllows to set different parameter for different responsive breakpoints (screen sizes). Not all parameters can be changed in breakpoints, only those which do not require different layout and logic, like slidesPerView, slidesPerGroup, spaceBetween, grid.rows. Such parameters like loop and effect won't work\n\nconst swiper = new Swiper('.swiper', {\n  // Default parameters\n  slidesPerView: 1,\n  spaceBetween: 10,\n  // Responsive breakpoints\n  breakpoints: {\n    // when window width is >= 320px\n    320: {\n      slidesPerView: 2,\n      spaceBetween: 20\n    },\n    // when window width is >= 480px\n    480: {\n      slidesPerView: 3,\n      spaceBetween: 30\n    },\n    // when window width is >= 640px\n    640: {\n      slidesPerView: 4,\n      spaceBetween: 40\n    }\n  }\n})\n\nconst swiper = new Swiper('.swiper', {\n  slidesPerView: 1,\n  spaceBetween: 10,\n  // using \"ratio\" endpoints\n  breakpoints: {\n    '@0.75': {\n      slidesPerView: 2,\n      spaceBetween: 20,\n    },\n    '@1.00': {\n      slidesPerView: 3,\n      spaceBetween: 40,\n    },\n    '@1.50': {\n      slidesPerView: 4,\n      spaceBetween: 50,\n    },\n  }\n});\n\n\nbreakpointsBase\tstring\t'window'\t\n\nBase for breakpoints (beta). Can be window or container. If set to window (by default) then breakpoint keys mean window width. If set to container then breakpoint keys treated as swiper container width\n\n\ncardsEffect\tany\t\t\n\nObject with Cards-effect parameters\n\nconst swiper = new Swiper('.swiper', {\n  effect: 'cards',\n  cardsEffect: {\n    // ...\n  },\n});\n\n\ncenterInsufficientSlides\tboolean\tfalse\t\n\nWhen enabled it center slides if the amount of slides less than slidesPerView. Not intended to be used loop mode and grid.rows\n\n\ncenteredSlides\tboolean\tfalse\t\n\nIf true, then active slide will be centered, not always on the left side.\n\n\ncenteredSlidesBounds\tboolean\tfalse\t\n\nIf true, then active slide will be centered without adding gaps at the beginning and end of slider. Required centeredSlides: true. Not intended to be used with loop or pagination\n\n\ncontainerModifierClass\tstring\t'swiper-'\t\n\nThe beginning of the modifier CSS class that can be added to swiper container depending on different parameters\n\n\ncontroller\tany\t\t\n\nObject with controller parameters or boolean true to enable with default settings\n\nconst swiper = new Swiper('.swiper', {\n  controller: {\n    inverse: true,\n  },\n});\n\n\ncoverflowEffect\tany\t\t\n\nObject with Coverflow-effect parameters.\n\nconst swiper = new Swiper('.swiper', {\n  effect: 'coverflow',\n  coverflowEffect: {\n    rotate: 30,\n    slideShadows: false,\n  },\n});\n\n\ncreateElements\tboolean\tfalse\t\n\nWhen enabled Swiper will automatically wrap slides with swiper-wrapper element, and will create required elements for navigation, pagination and scrollbar they are enabled (with their respective params object or with boolean true))\n\n\ncreativeEffect\tany\t\t\n\nObject with Creative-effect parameters\n\nconst swiper = new Swiper('.swiper', {\n  effect: 'creative',\n  creativeEffect: {\n    prev: {\n      // will set `translateZ(-400px)` on previous slides\n      translate: [0, 0, -400],\n    },\n    next: {\n      // will set `translateX(100%)` on next slides\n      translate: ['100%', 0, 0],\n    },\n  },\n});\n\n\ncssMode\tboolean\tfalse\t\n\nWhen enabled it will use modern CSS Scroll Snap API. It doesn't support all of Swiper's features, but potentially should bring a much better performance in simple configurations.\n\nThis is what is not supported when it is enabled:\n\nCube effect\nspeed parameter may not have no effect\nAll transition start/end related events (use slideChange instead)\nslidesPerGroup has limited support\nsimulateTouch doesn't have effect and \"dragging\" with mouse doesn't work\nresistance doesn't have any effect\nallowSlidePrev/Next\nswipeHandler\n\nIn case if you use it with other effects, especially 3D effects, it is required to wrap slide's content with <div className=\"swiper-slide-transform\"> element. And if you use any custom styles on slides (like background colors, border radius, border, etc.), they should be set on swiper-slide-transform element instead.\n\n<div class=\"swiper\">\n  <div class=\"swiper-wrapper\">\n    <div class=\"swiper-slide\">\n      <!-- wrap slide content with transform element -->\n      <div class=\"swiper-slide-transform\">\n        ... slide content ...\n      </div>\n    </div>\n    ...\n  </div>\n</div>\n<script>\nconst swiper = new Swiper('.swiper', {\n   effect: 'flip',\n   cssMode: true,\n });\n</script>\n\n\ncubeEffect\tany\t\t\n\nObject with Cube-effect parameters\n\nconst swiper = new Swiper('.swiper', {\n  effect: 'cube',\n  cubeEffect: {\n    slideShadows: false,\n  },\n});\n\n\ndirection\t'horizontal' | 'vertical'\t'horizontal'\t\n\nCan be 'horizontal' or 'vertical' (for vertical slider).\n\n\nedgeSwipeDetection\tstring | boolean\tfalse\t\n\nEnable to release Swiper events for swipe-back work in app. If set to 'prevent' then it will prevent system swipe-back navigation instead. This feature works only with \"touch\" events (and not pointer events), so it will work on iOS/Android devices and won't work on Windows devices with pointer (touch) events.\n\n\nedgeSwipeThreshold\tnumber\t20\t\n\nArea (in px) from left edge of the screen to release touch events for swipe-back in app\n\n\neffect\tstring\t'slide'\t\n\nTransition effect. Can be 'slide', 'fade', 'cube', 'coverflow', 'flip' or 'creative'\n\n\nenabled\tboolean\ttrue\t\n\nWhether Swiper initially enabled. When Swiper is disabled, it will hide all navigation elements and won't respond to any events and interactions\n\n\neventsPrefix\tstring\t`swiper`\t\n\nEvent name prefix for all DOM events emitted by Swiper Element (web component)\n\n\nfadeEffect\tany\t\t\n\nObject with Fade-effect parameters\n\nconst swiper = new Swiper('.swiper', {\n  effect: 'fade',\n  fadeEffect: {\n    crossFade: true\n  },\n});\n\n\nflipEffect\tany\t\t\n\nObject with Flip-effect parameters\n\nconst swiper = new Swiper('.swiper', {\n  effect: 'flip',\n  flipEffect: {\n    slideShadows: false,\n  },\n});\n\n\nfocusableElements\tstring\t'input, select, option, textarea, button, video, label'\t\n\nCSS selector for focusable elements. Swiping will be disabled on such elements if they are \"focused\"\n\n\nfollowFinger\tboolean\ttrue\t\n\nIf disabled, then slider will be animated only when you release it, it will not move while you hold your finger on it\n\n\nfreeMode\tany\t\t\n\nEnables free mode functionality. Object with free mode parameters or boolean true to enable with default settings.\n\nconst swiper = new Swiper('.swiper', {\n  freeMode: true,\n});\n\nconst swiper = new Swiper('.swiper', {\n  freeMode: {\n    enabled: true,\n    sticky: true,\n  },\n});\n\n\ngrabCursor\tboolean\tfalse\t\n\nThis option may a little improve desktop usability. If true, user will see the \"grab\" cursor when hover on Swiper\n\n\ngrid\tany\t\t\n\nObject with grid parameters to enable \"multirow\" slider.\n\nconst swiper = new Swiper('.swiper', {\n  grid: {\n    rows: 2,\n  },\n});\n\n\nhashNavigation\tany\t\t\n\nEnables hash url navigation to for slides. Object with hash navigation parameters or boolean true to enable with default settings\n\nconst swiper = new Swiper('.swiper', {\n  hashNavigation: {\n    replaceState: true,\n  },\n});\n\n\nheight\tnull | number\tnull\t\n\nSwiper height (in px). Parameter allows to force Swiper height. Useful only if you initialize Swiper when it is hidden and in SSR and Test environments for correct Swiper initialization\n\nSetting this parameter will make Swiper not responsive\n\n\nhistory\tany\t\t\n\nEnables history push state where every slide will have its own url. In this parameter you have to specify main slides url like \"slides\" and specify every slide url using data-history attribute.\n\nObject with history navigation parameters or boolean true to enable with default settings\n\nconst swiper = new Swiper('.swiper', {\n  history: {\n    replaceState: true,\n  },\n});\n\n<!-- will produce \"slides/slide1\" url in browser history -->\n<div class=\"swiper-slide\" data-history=\"slide1\"></div>\n\n\ninit\tboolean\ttrue\t\n\nWhether Swiper should be initialised automatically when you create an instance. If disabled, then you need to init it manually by calling swiper.init()\n\n\ninitialSlide\tnumber\t0\t\n\nIndex number of initial slide.\n\n\ninjectStyles\tstring[]\t\t\n\nInject text styles to the shadow DOM. Only for usage with Swiper Element\n\n\ninjectStylesUrls\tstring[]\t\t\n\nInject styles <link>s to the shadow DOM. Only for usage with Swiper Element\n\n\nkeyboard\tany\t\t\n\nEnables navigation through slides using keyboard. Object with keyboard parameters or boolean true to enable with default settings\n\nconst swiper = new Swiper('.swiper', {\n  keyboard: {\n    enabled: true,\n    onlyInViewport: false,\n  },\n});\n\n\nlazyPreloadPrevNext\tnumber\t0\t\n\nNumber of next and previous slides to preload. Only applicable if using lazy loading.\n\n\nlazyPreloaderClass\tstring\t'swiper-lazy-preloader'\t\n\nCSS class name of lazy preloader\n\n\nlongSwipes\tboolean\ttrue\t\n\nSet to false if you want to disable long swipes\n\n\nlongSwipesMs\tnumber\t300\t\n\nMinimal duration (in ms) to trigger swipe to next/previous slide during long swipes\n\n\nlongSwipesRatio\tnumber\t0.5\t\n\nRatio to trigger swipe to next/previous slide during long swipes\n\n\nloop\tboolean\tfalse\t\n\nSet to true to enable continuous loop mode\n\nBecause of nature of how the loop mode works (it will rearrange slides), total number of slides must be:\n\nmore than or equal to slidesPerView + slidesPerGroup\neven to slidesPerGroup (or use loopAddBlankSlides parameter)\neven to grid.rows (or use loopAddBlankSlides parameter)\n\nloopAddBlankSlides\tboolean\ttrue\t\n\nAutomatically adds blank slides if you use Grid or slidesPerGroup and the total amount of slides is not even to slidesPerGroup or to grid.rows\n\n\nloopAdditionalSlides\tnumber\t0\t\n\nAllows to increase amount of looped slides\n\n\nloopPreventsSliding\tboolean\ttrue\t\n\nIf enabled then slideNext/Prev will do nothing while slider is animating in loop mode\n\n\nmaxBackfaceHiddenSlides\tnumber\t10\t\n\nIf total number of slides less than specified here value, then Swiper will enable backface-visibility: hidden on slide elements to reduce visual \"flicker\" in Safari.\n\nIt is not recommended to enable it on large amount of slides as it will reduce performance\n\n\nmodules\tany[]\t\t\n\nArray with Swiper modules\n\nimport Swiper from 'swiper';\nimport { Navigation, Pagination } from 'swiper/modules';\n\nconst swiper = new Swiper('.swiper', {\n   modules: [ Navigation, Pagination ],\n });\n\n\nmousewheel\tany\t\t\n\nEnables navigation through slides using mouse wheel. Object with mousewheel parameters or boolean true to enable with default settings\n\nconst swiper = new Swiper('.swiper', {\n  mousewheel: {\n    invert: true,\n  },\n});\n\n\nnavigation\tany\t\t\n\nObject with navigation parameters or boolean true to enable with default settings.\n\nconst swiper = new Swiper('.swiper', {\n  navigation: {\n    nextEl: '.swiper-button-next',\n    prevEl: '.swiper-button-prev',\n  },\n});\n\n\nnested\tboolean\tfalse\t\n\nSet to true on Swiper for correct touch events interception. Use only on swipers that use same direction as the parent one\n\n\nnoSwiping\tboolean\ttrue\t\n\nEnable/disable swiping on elements matched to class specified in noSwipingClass\n\n\nnoSwipingClass\tstring\t'swiper-no-swiping'\t\n\nSpecify noSwiping's element css class\n\n\nnoSwipingSelector\tstring\t\t\n\nCan be used instead of noSwipingClass to specify elements to disable swiping on. For example 'input' will disable swiping on all inputs\n\n\nnormalizeSlideIndex\tboolean\ttrue\t\n\nNormalize slide index.\n\n\nobserveParents\tboolean\tfalse\t\n\nSet to true if you also need to watch Mutations for Swiper parent elements\n\n\nobserveSlideChildren\tboolean\tfalse\t\n\nSet to true if you also need to watch Mutations for Swiper slide children elements\n\n\nobserver\tboolean\tfalse\t\n\nSet to true to enable Mutation Observer on Swiper and its elements. In this case Swiper will be updated (reinitialized) each time if you change its style (like hide/show) or modify its child elements (like adding/removing slides)\n\n\non\tobject\t\t\n\nRegister event handlers\n\n\nonAny\tfunction(handler)\t\t\n\nAdd event listener that will be fired on all events\n\nconst swiper = new Swiper('.swiper', {\n   onAny(eventName, ...args) {\n     console.log('Event: ', eventName);\n     console.log('Event data: ', args);\n   }\n });\n\n\noneWayMovement\tboolean\tfalse\t\n\nWhen enabled, will swipe slides only forward (one-way) regardless of swipe direction\n\n\npagination\tany\t\t\n\nObject with pagination parameters or boolean true to enable with default settings.\n\nconst swiper = new Swiper('.swiper', {\n  pagination: {\n    el: '.swiper-pagination',\n    type: 'bullets',\n  },\n});\n\n\nparallax\tany\t\t\n\nObject with parallax parameters or boolean true to enable with default settings.\n\nconst swiper = new Swiper('.swiper', {\n  parallax: true,\n});\n\n\npassiveListeners\tboolean\ttrue\t\n\nPassive event listeners will be used by default where possible to improve scrolling performance on mobile devices. But if you need to use e.preventDefault and you have conflict with it, then you should disable this parameter\n\n\npreventClicks\tboolean\ttrue\t\n\nSet to true to prevent accidental unwanted clicks on links during swiping\n\n\npreventClicksPropagation\tboolean\ttrue\t\n\nSet to true to stop clicks event propagation on links during swiping\n\n\npreventInteractionOnTransition\tboolean\tfalse\t\n\nWhen enabled it won't allow to change slides by swiping or navigation/pagination buttons during transition\n\n\nresistance\tboolean\ttrue\t\n\nSet to false if you want to disable resistant bounds\n\n\nresistanceRatio\tnumber\t0.85\t\n\nThis option allows you to control resistance ratio\n\n\nresizeObserver\tboolean\ttrue\t\n\nWhen enabled it will use ResizeObserver (if supported by browser) on swiper container to detect container resize (instead of watching for window resize)\n\n\nrewind\tboolean\tfalse\t\n\nSet to true to enable \"rewind\" mode. When enabled, clicking \"next\" navigation button (or calling .slideNext()) when on last slide will slide back to the first slide. Clicking \"prev\" navigation button (or calling .slidePrev()) when on first slide will slide forward to the last slide.\n\nShould not be used together with loop mode\n\n\nroundLengths\tboolean\tfalse\t\n\nSet to true to round values of slides width and height to prevent blurry texts on usual resolution screens (if you have such)\n\n\nrunCallbacksOnInit\tboolean\ttrue\t\n\nFire Transition/SlideChange/Start/End events on swiper initialization. Such events will be fired on initialization in case of your initialSlide is not 0, or you use loop mode\n\n\nscrollbar\tany\t\t\n\nObject with scrollbar parameters or boolean true to enable with default settings.\n\nconst swiper = new Swiper('.swiper', {\n  scrollbar: {\n    el: '.swiper-scrollbar',\n    draggable: true,\n  },\n});\n\n\nsetWrapperSize\tboolean\tfalse\t\n\nEnabled this option and plugin will set width/height on swiper wrapper equal to total size of all slides. Mostly should be used as compatibility fallback option for browser that don't support flexbox layout well\n\n\nshortSwipes\tboolean\ttrue\t\n\nSet to false if you want to disable short swipes\n\n\nsimulateTouch\tboolean\ttrue\t\n\nIf true, Swiper will accept mouse events like touch events (click and drag to change slides)\n\n\nslideActiveClass\tstring\t'swiper-slide-active'\t\n\nCSS class name of currently active slide\n\nBy changing classes you will also need to change Swiper's CSS to reflect changed classes\n\nNot supported in Swiper React/Vue components\n\n\nslideBlankClass\tstring\t'swiper-slide-blank'\t\n\nCSS class name of the blank slide added by the loop mode (when loopAddBlankSlides is enabled)\n\nNot supported in Swiper React/Vue\n\n\nslideClass\tstring\t'swiper-slide'\t\n\nCSS class name of slide\n\nBy changing classes you will also need to change Swiper's CSS to reflect changed classes\n\nNot supported in Swiper React/Vue components\n\n\nslideFullyVisibleClass\tstring\t'swiper-slide-fully-visible'\t\n\nCSS class name of fully (when whole slide is in the viewport) visible slide\n\nNot supported in Swiper React/Vue\n\n\nslideNextClass\tstring\t'swiper-slide-next'\t\n\nCSS class name of slide which is right after currently active slide\n\nBy changing classes you will also need to change Swiper's CSS to reflect changed classes\n\nNot supported in Swiper React/Vue\n\n\nslidePrevClass\tstring\t'swiper-slide-prev'\t\n\nCSS class name of slide which is right before currently active slide\n\nBy changing classes you will also need to change Swiper's CSS to reflect changed classes\n\nNot supported in Swiper React/Vue\n\n\nslideToClickedSlide\tboolean\tfalse\t\n\nSet to true and click on any slide will produce transition to this slide\n\n\nslideVisibleClass\tstring\t'swiper-slide-visible'\t\n\nCSS class name of currently/partially visible slide\n\nBy changing classes you will also need to change Swiper's CSS to reflect changed classes\n\nNot supported in Swiper React/Vue\n\n\nslidesOffsetAfter\tnumber\t0\t\n\nAdd (in px) additional slide offset in the end of the container (after all slides)\n\n\nslidesOffsetBefore\tnumber\t0\t\n\nAdd (in px) additional slide offset in the beginning of the container (before all slides)\n\n\nslidesPerGroup\tnumber\t1\t\n\nSet numbers of slides to define and enable group sliding. Useful to use with slidesPerView > 1\n\n\nslidesPerGroupAuto\tboolean\tfalse\t\n\nThis param intended to be used only with slidesPerView: 'auto' and slidesPerGroup: 1. When enabled, it will skip all slides in view on .slideNext() & .slidePrev() methods calls, on Navigation \"buttons\" clicks and in autoplay.\n\n\nslidesPerGroupSkip\tnumber\t0\t\n\nThe parameter works in the following way: If slidesPerGroupSkip equals 0 (default), no slides are excluded from grouping, and the resulting behaviour is the same as without this change.\n\nIf slidesPerGroupSkip is equal or greater than 1 the first X slides are treated as single groups, whereas all following slides are grouped by the slidesPerGroup value.\n\n\nslidesPerView\tnumber | 'auto'\t1\t\n\nNumber of slides per view (slides visible at the same time on slider's container).\n\nslidesPerView: 'auto' is currently not compatible with multirow mode, when grid.rows > 1\n\n\nspaceBetween\tstring | number\t0\t\n\nDistance between slides in px.\n\nIf you use \"margin\" css property to the elements which go into Swiper in which you pass \"spaceBetween\" into, navigation might not work properly.\n\n\nspeed\tnumber\t300\t\n\nDuration of transition between slides (in ms)\n\n\nswipeHandler\tany\tnull\t\n\nString with CSS selector or HTML element of the container with pagination that will work as only available handler for swiping\n\n\nswiperElementNodeName\tstring\t'SWIPER-CONTAINER'\t\n\nThe name of the swiper element node name; used for detecting web component rendering\n\n\nthreshold\tnumber\t5\t\n\nThreshold value in px. If \"touch distance\" will be lower than this value then swiper will not move\n\n\nthumbs\tany\t\t\n\nObject with thumbs component parameters\n\nconst swiper = new Swiper('.swiper', {\n  ...\n  thumbs: {\n    swiper: thumbsSwiper\n  }\n});\n\n\ntouchAngle\tnumber\t45\t\n\nAllowable angle (in degrees) to trigger touch move\n\n\ntouchEventsTarget\t'container' | 'wrapper'\t'wrapper'\t\n\nTarget element to listen touch events on. Can be 'container' (to listen for touch events on swiper) or 'wrapper'(to listen for touch events on swiper-wrapper)\n\n\ntouchMoveStopPropagation\tboolean\tfalse\t\n\nIf enabled, then propagation of \"touchmove\" will be stopped\n\n\ntouchRatio\tnumber\t1\t\n\nTouch ratio\n\n\ntouchReleaseOnEdges\tboolean\tfalse\t\n\nEnable to release touch events on slider edge position (beginning, end) to allow for further page scrolling. This feature works only with \"touch\" events (and not pointer events), so it will work on iOS/Android devices and won't work on Windows devices with pointer events. Also threshold parameter must be set to 0\n\n\ntouchStartForcePreventDefault\tboolean\tfalse\t\n\nForce to always prevent default for touchstart (pointerdown) event\n\n\ntouchStartPreventDefault\tboolean\ttrue\t\n\nIf disabled, pointerdown event won't be prevented\n\n\nuniqueNavElements\tboolean\ttrue\t\n\nIf enabled (by default) and navigation elements' parameters passed as a string (like \".pagination\") then Swiper will look for such elements through child elements first. Applies for pagination, prev/next buttons and scrollbar elements\n\n\nupdateOnWindowResize\tboolean\ttrue\t\n\nSwiper will recalculate slides position on window resize (orientationchange)\n\n\nurl\tnull | string\tnull\t\n\nRequired for active slide detection when rendered on server-side and enabled history\n\n\nuserAgent\tnull | string\tnull\t\n\nuserAgent string. Required for browser/device detection when rendered on server-side\n\n\nvirtual\tany\t\t\n\nEnables virtual slides functionality. Object with virtual slides parameters or boolean true to enable with default settings.\n\nconst swiper = new Swiper('.swiper', {\n  virtual: {\n    slides: ['Slide 1', 'Slide 2', 'Slide 3', 'Slide 4', 'Slide 5'],\n  },\n});\n\n\nvirtualTranslate\tboolean\tfalse\t\n\nEnabled this option and swiper will be operated as usual except it will not move, real translate values on wrapper will not be set. Useful when you may need to create custom slide transition\n\n\nwatchOverflow\tboolean\ttrue\t\n\nWhen enabled Swiper will be disabled and hide navigation buttons on case there are not enough slides for sliding.\n\n\nwatchSlidesProgress\tboolean\tfalse\t\n\nEnable this feature to calculate each slides progress and visibility (slides in viewport will have additional visible class)\n\n\nwidth\tnull | number\tnull\t\n\nSwiper width (in px). Parameter allows to force Swiper width. Useful only if you initialize Swiper when it is hidden and in SSR and Test environments for correct Swiper initialization\n\nSetting this parameter will make Swiper not responsive\n\n\nwrapperClass\tstring\t'swiper-wrapper'\t\n\nCSS class name of slides' wrapper\n\nBy changing classes you will also need to change Swiper's CSS to reflect changed classes\n\nNot supported in Swiper React/Vue\n\n\nzoom\tany\t\t\n\nEnables zooming functionality. Object with zoom parameters or boolean true to enable with default settings\n\nconst swiper = new Swiper('.swiper', {\n  zoom: {\n    maxRatio: 5,\n  },\n});\n\nMethods & Properties\n\nAfter we initialize Slider we have its initialized instance in variable (like swiper variable in example above) with helpful methods and properties:\n\nProperties\nswiper.a11y\tany\t\nswiper.activeIndex\tnumber\t\n\nIndex number of currently active slide\n\nNote, that in loop mode active index value will be always shifted on a number of looped slides\n\n\nswiper.allowSlideNext\tboolean\t\n\nDisable / enable ability to slide to the next slides by assigning false / true to this property\n\n\nswiper.allowSlidePrev\tboolean\t\n\nDisable / enable ability to slide to the previous slides by assigning false / true to this property\n\n\nswiper.allowTouchMove\tboolean\t\n\nDisable / enable ability move slider by grabbing it with mouse or by touching it with finger (on touch screens) by assigning false / true to this property\n\n\nswiper.animating\tboolean\t\n\ntrue if swiper is in transition\n\n\nswiper.autoplay\tany\t\nswiper.cardsEffect\tany\t\nswiper.clickedIndex\tnumber\t\n\nIndex number of last clicked slide\n\n\nswiper.clickedSlide\tHTMLElement\t\n\nLink to last clicked slide (HTMLElement)\n\n\nswiper.controller\tany\t\nswiper.coverflowEffect\tany\t\nswiper.creativeEffect\tany\t\nswiper.cubeEffect\tany\t\nswiper.defaults\tany\t\n\nSwiper default options\n\n\nswiper.el\tHTMLElement\t\n\nSlider container HTML element\n\n\nswiper.extendedDefaults\tany\t\n\nObject with global Swiper extended options\n\n\nswiper.fadeEffect\tany\t\nswiper.flipEffect\tany\t\nswiper.freeMode\tany\t\nswiper.hashNavigation\tany\t\nswiper.height\tnumber\t\n\nHeight of container\n\n\nswiper.history\tany\t\nswiper.isBeginning\tboolean\t\n\ntrue if slider on most \"left\"/\"top\" position\n\n\nswiper.isEnd\tboolean\t\n\ntrue if slider on most \"right\"/\"bottom\" position\n\n\nswiper.isLocked\tboolean\t\n\ntrue if slide is \"locked\" (by watchOverflow) and slides can not be, e.g. when amount of slides is less that slides per view\n\n\nswiper.keyboard\tany\t\nswiper.mousewheel\tany\t\nswiper.navigation\tany\t\nswiper.originalParams\tany\t\n\nObject with original initialization parameters\n\n\nswiper.pagination\tany\t\nswiper.parallax\tany\t\nswiper.params\tany\t\n\nObject with passed initialization parameters\n\n\nswiper.previousIndex\tnumber\t\n\nIndex number of previously active slide\n\n\nswiper.progress\tnumber\t\n\nCurrent progress of wrapper translate (from 0 to 1)\n\n\nswiper.realIndex\tnumber\t\n\nIndex number of currently active slide considering rearranged slides in loop mode\n\n\nswiper.scrollbar\tany\t\nswiper.slides\tHTMLElement[]\t\n\nArray of slides HTML elements. To get specific slide HTMLElement use swiper.slides[1]\n\n\nswiper.snapGrid\tnumber[]\t\n\nSlides snap grid\n\n\nswiper.snapIndex\tnumber\t\n\nIndex number of current snap in snapGrid\n\n\nswiper.swipeDirection\t'prev' | 'next'\t\n\nDirection of sliding\n\n\nswiper.thumbs\tany\t\nswiper.touches\tobject\t\n\nObject with the following touch event properties:\n\nswiper.touches.startX\nswiper.touches.startY\nswiper.touches.currentX\nswiper.touches.currentY\nswiper.touches.diff\n\nswiper.translate\tnumber\t\n\nCurrent value of wrapper translate\n\n\nswiper.virtual\tany\t\nswiper.width\tnumber\t\n\nWidth of container\n\n\nswiper.wrapperEl\tHTMLElement\t\n\nWrapper HTML element\n\n\nswiper.zoom\tany\t\nMethods\nswiper.attachEvents()\t\n\nAttach all events listeners again\n\n\nswiper.changeDirection(direction, needUpdate)\t\n\nChanges slider direction from horizontal to vertical and back.\n\ndirection - 'horizontal' | 'vertical' - New direction. If not specified, then will automatically changed to opposite direction\nneedUpdate - boolean - Will call swiper.update(). Default true\n\nswiper.changeLanguageDirection(direction)\t\n\nChanges slider language\n\ndirection - 'rtl' | 'ltr' - New direction. Should be `rtl` or `ltr`\n\nswiper.destroy(deleteInstance, cleanStyles)\t\n\nDestroy slider instance and detach all events listeners\n\ndeleteInstance - boolean - Set it to false (by default it is true) to not to delete Swiper instance\ncleanStyles - boolean - Set it to true (by default it is true) and all custom styles will be removed from slides, wrapper and container. Useful if you need to destroy Swiper and to init again with new options or in different direction\n\nswiper.detachEvents()\t\n\nDetach all events listeners\n\n\nswiper.disable()\t\n\nDisable Swiper (if it was enabled). When Swiper is disabled, it will hide all navigation elements and won't respond to any events and interactions\n\n\nswiper.emit(event, args)\t\n\nFire event on instance\n\n\nswiper.enable()\t\n\nEnable Swiper (if it was disabled)\n\n\nswiper.extendDefaults(options)\t\n\nExtend global Swiper defaults\n\n\nswiper.getTranslate()\t\n\nGet current value of swiper wrapper css3 transform translate\n\n\nswiper.init(el)\t\n\nInitialize slider\n\n\nswiper.off(event, handler)\t\n\nRemove event handler\n\n\nswiper.offAny(handler)\t\n\nRemove event listener that will be fired on all events\n\n\nswiper.on(event, handler)\t\n\nAdd event handler\n\n\nswiper.onAny(handler)\t\n\nAdd event listener that will be fired on all events\n\n\nswiper.once(event, handler)\t\n\nAdd event handler that will be removed after it was fired\n\n\nswiper.setGrabCursor()\t\n\nSet grab cursor\n\n\nswiper.setProgress(progress, speed)\t\n\nSet Swiper translate progress (from 0 to 1). Where 0 - its initial position (offset) on first slide, and 1 - its maximum position (offset) on last slide\n\nprogress - number - Swiper translate progress (from 0 to 1).\nspeed - number - Transition duration (in ms).\n\nswiper.setTranslate(translate)\t\n\nSet custom css3 transform's translate value for swiper wrapper\n\n\nswiper.slideNext(speed, runCallbacks)\t\n\nRun transition to next slide.\n\nspeed - number - Transition duration (in ms).\nrunCallbacks - boolean - Set it to false (by default it is true) and transition will not produce transition events.\n\nswiper.slidePrev(speed, runCallbacks)\t\n\nRun transition to previous slide.\n\nspeed - number - Transition duration (in ms).\nrunCallbacks - boolean - Set it to false (by default it is true) and transition will not produce transition events.\n\nswiper.slideReset(speed, runCallbacks)\t\n\nReset swiper position to currently active slide for the duration equal to 'speed' parameter.\n\nspeed - number - Transition duration (in ms).\nrunCallbacks - boolean - Set it to false (by default it is true) and transition will not produce transition events.\n\nswiper.slideTo(index, speed, runCallbacks)\t\n\nRun transition to the slide with index number equal to 'index' parameter for the duration equal to 'speed' parameter.\n\nindex - number - Index number of slide.\nspeed - number - Transition duration (in ms).\nrunCallbacks - boolean - Set it to false (by default it is true) and transition will not produce transition events.\n\nswiper.slideToClosest(speed, runCallbacks)\t\n\nReset swiper position to closest slide/snap point for the duration equal to 'speed' parameter.\n\nspeed - number - Transition duration (in ms).\nrunCallbacks - boolean - Set it to false (by default it is true) and transition will not produce transition events.\n\nswiper.slideToLoop(index, speed, runCallbacks)\t\n\nDoes the same as .slideTo but for the case when used with enabled loop. So this method will slide to slides with realIndex matching to passed index\n\nindex - number - Index number of slide.\nspeed - number - Transition duration (in ms).\nrunCallbacks - boolean - Set it to false (by default it is true) and transition will not produce transition events.\n\nswiper.slidesPerViewDynamic()\t\n\nGet dynamically calculated amount of slides per view, useful only when slidesPerView set to auto\n\n\nswiper.translateTo(translate, speed, runCallbacks, translateBounds)\t\n\nAnimate custom css3 transform's translate value for swiper wrapper\n\ntranslate - number - Translate value (in px)\nspeed - number - Transition duration (in ms)\nrunCallbacks - boolean - Set it to false (by default it is true) and transition will not produce transition events\ntranslateBounds - boolean - Set it to false (by default it is true) and transition value can extend beyond min and max translate\n\nswiper.unsetGrabCursor()\t\n\nUnset grab cursor\n\n\nswiper.update()\t\n\nYou should call it after you add/remove slides manually, or after you hide/show it, or do any custom DOM modifications with Swiper This method also includes subcall of the following methods which you can use separately:\n\n\nswiper.updateAutoHeight(speed)\t\n\nForce swiper to update its height (when autoHeight enabled) for the duration equal to 'speed' parameter\n\nspeed - number - Transition duration (in ms).\n\nswiper.updateProgress()\t\n\nrecalculate swiper progress\n\n\nswiper.updateSize()\t\n\nrecalculate size of swiper container\n\n\nswiper.updateSlides()\t\n\nrecalculate number of slides and their offsets. Useful after you add/remove slides with JavaScript\n\n\nswiper.updateSlidesClasses()\t\n\nupdate active/prev/next classes on slides and bullets\n\n\nswiper.use(modules)\t\n\nInstalls modules on Swiper in runtime.\n\nEvents\n\nSwiper comes with a bunch of useful events you can listen. Events can be assigned in two ways:\n\nUsing on parameter on swiper initialization:\n\nconst swiper = new Swiper('.swiper', {\n  // ...\n  on: {\n    init: function () {\n      console.log('swiper initialized');\n    },\n  },\n});\n\n\nUsing on method after swiper initialization.\n\nconst swiper = new Swiper('.swiper', {\n  // ...\n});\nswiper.on('slideChange', function () {\n  console.log('slide changed');\n});\n\nPlease note, that this keyword within event handler always points to Swiper instance\nName\tArguments\tDescription\nactiveIndexChange\t(swiper)\t\n\nEvent will fired on active index change\n\n\nafterInit\t(swiper)\t\n\nEvent will fired right after initialization\n\n\nbeforeDestroy\t(swiper)\t\n\nEvent will be fired right before Swiper destroyed\n\n\nbeforeInit\t(swiper)\t\n\nEvent will fired right before initialization\n\n\nbeforeLoopFix\t(swiper)\t\n\nEvent will be fired right before \"loop fix\"\n\n\nbeforeResize\t(swiper)\t\n\nEvent will fired before resize handler\n\n\nbeforeSlideChangeStart\t(swiper)\t\n\nEvent will fired before slide change transition start\n\n\nbeforeTransitionStart\t(swiper, speed, internal)\t\n\nEvent will fired before transition start\n\n\nbreakpoint\t(swiper, breakpointParams)\t\n\nEvent will be fired on breakpoint change\n\n\nchangeDirection\t(swiper)\t\n\nEvent will fired on direction change\n\n\nclick\t(swiper, event)\t\n\nEvent will be fired when user click/tap on Swiper. Receives pointerup event as an arguments.\n\n\ndestroy\t(swiper)\t\n\nEvent will be fired on swiper destroy\n\n\ndoubleClick\t(swiper, event)\t\n\nEvent will be fired when user double click/tap on Swiper\n\n\ndoubleTap\t(swiper, event)\t\n\nEvent will be fired when user double tap on Swiper's container. Receives pointerup event as an arguments\n\n\nfromEdge\t(swiper)\t\n\nEvent will be fired when Swiper goes from beginning or end position\n\n\ninit\t(swiper)\t\n\nFired right after Swiper initialization.\n\nNote that with swiper.on('init') syntax it will work only in case you set init: false parameter.\n\nconst swiper = new Swiper('.swiper', {\n  init: false,\n  // other parameters\n});\nswiper.on('init', function() {\n // do something\n});\n// init Swiper\nswiper.init();\n\n// Otherwise use it as the parameter:\nconst swiper = new Swiper('.swiper', {\n  // other parameters\n  on: {\n    init: function () {\n      // do something\n    },\n  }\n});\n\n\nlock\t(swiper)\t\n\nEvent will be fired when swiper is locked (when watchOverflow enabled)\n\n\nloopFix\t(swiper)\t\n\nEvent will be fired after \"loop fix\"\n\n\nmomentumBounce\t(swiper)\t\n\nEvent will be fired on momentum bounce\n\n\nobserverUpdate\t(swiper)\t\n\nEvent will be fired if observer is enabled and it detects DOM mutations\n\n\norientationchange\t(swiper)\t\n\nEvent will be fired on orientation change (e.g. landscape -> portrait)\n\n\nprogress\t(swiper, progress)\t\n\nEvent will be fired when Swiper progress is changed, as an arguments it receives progress that is always from 0 to 1\n\n\nreachBeginning\t(swiper)\t\n\nEvent will be fired when Swiper reach its beginning (initial position)\n\n\nreachEnd\t(swiper)\t\n\nEvent will be fired when Swiper reach last slide\n\n\nrealIndexChange\t(swiper)\t\n\nEvent will fired on real index change\n\n\nresize\t(swiper)\t\n\nEvent will be fired on window resize right before swiper's onresize manipulation\n\n\nsetTransition\t(swiper, transition)\t\n\nEvent will be fired everytime when swiper starts animation. Receives current transition duration (in ms) as an arguments\n\n\nsetTranslate\t(swiper, translate)\t\n\nEvent will be fired when swiper's wrapper change its position. Receives current translate value as an arguments\n\n\nslideChange\t(swiper)\t\n\nEvent will be fired when currently active slide is changed\n\n\nslideChangeTransitionEnd\t(swiper)\t\n\nEvent will be fired after animation to other slide (next or previous).\n\n\nslideChangeTransitionStart\t(swiper)\t\n\nEvent will be fired in the beginning of animation to other slide (next or previous).\n\n\nslideNextTransitionEnd\t(swiper)\t\n\nSame as \"slideChangeTransitionEnd\" but for \"forward\" direction only\n\n\nslideNextTransitionStart\t(swiper)\t\n\nSame as \"slideChangeTransitionStart\" but for \"forward\" direction only\n\n\nslidePrevTransitionEnd\t(swiper)\t\n\nSame as \"slideChangeTransitionEnd\" but for \"backward\" direction only\n\n\nslidePrevTransitionStart\t(swiper)\t\n\nSame as \"slideChangeTransitionStart\" but for \"backward\" direction only\n\n\nslideResetTransitionEnd\t(swiper)\t\n\nEvent will be fired in the end of animation of resetting slide to current one\n\n\nslideResetTransitionStart\t(swiper)\t\n\nEvent will be fired in the beginning of animation of resetting slide to current one\n\n\nsliderFirstMove\t(swiper, event)\t\n\nEvent will be fired with first touch/drag move\n\n\nsliderMove\t(swiper, event)\t\n\nEvent will be fired when user touch and move finger over Swiper and move it. Receives pointermove event as an arguments.\n\n\nslidesGridLengthChange\t(swiper)\t\n\nEvent will be fired when slides grid has changed\n\n\nslidesLengthChange\t(swiper)\t\n\nEvent will be fired when number of slides has changed\n\n\nslidesUpdated\t(swiper)\t\n\nEvent will be fired after slides and their sizes are calculated and updated\n\n\nsnapGridLengthChange\t(swiper)\t\n\nEvent will be fired when snap grid has changed\n\n\nsnapIndexChange\t(swiper)\t\n\nEvent will fired on snap index change\n\n\ntap\t(swiper, event)\t\n\nEvent will be fired when user click/tap on Swiper. Receives pointerup event as an arguments.\n\n\ntoEdge\t(swiper)\t\n\nEvent will be fired when Swiper goes to beginning or end position\n\n\ntouchEnd\t(swiper, event)\t\n\nEvent will be fired when user release Swiper. Receives pointerup event as an arguments.\n\n\ntouchMove\t(swiper, event)\t\n\nEvent will be fired when user touch and move finger over Swiper. Receives pointermove event as an arguments.\n\n\ntouchMoveOpposite\t(swiper, event)\t\n\nEvent will be fired when user touch and move finger over Swiper in direction opposite to direction parameter. Receives pointermove event as an arguments.\n\n\ntouchStart\t(swiper, event)\t\n\nEvent will be fired when user touch Swiper. Receives pointerdown event as an arguments.\n\n\ntransitionEnd\t(swiper)\t\n\nEvent will be fired after transition.\n\n\ntransitionStart\t(swiper)\t\n\nEvent will be fired in the beginning of transition.\n\n\nunlock\t(swiper)\t\n\nEvent will be fired when swiper is unlocked (when watchOverflow enabled)\n\n\nupdate\t(swiper)\t\n\nEvent will be fired after swiper.update() call\n\nModules\nNavigation\nNavigation Parameters\nName\tType\tDefault\tDescription\ndisabledClass\tstring\t'swiper-button-disabled'\t\n\nCSS class name added to navigation button when it becomes disabled\n\n\nenabled\tboolean\t\t\n\nBoolean property to use with breakpoints to enable/disable navigation on certain breakpoints\n\n\nhiddenClass\tstring\t'swiper-button-hidden'\t\n\nCSS class name added to navigation button when it becomes hidden\n\n\nhideOnClick\tboolean\tfalse\t\n\nToggle navigation buttons visibility after click on Slider's container\n\n\nlockClass\tstring\t'swiper-button-lock'\t\n\nCSS class name added to navigation button when it is disabled\n\n\nnavigationDisabledClass\tstring\t'swiper-navigation-disabled'\t\n\nCSS class name added on swiper container when navigation is disabled by breakpoint\n\n\nnextEl\tany\tnull\t\n\nString with CSS selector or HTML element of the element that will work like \"next\" button after click on it\n\n\nprevEl\tany\tnull\t\n\nString with CSS selector or HTML element of the element that will work like \"prev\" button after click on it\n\nNavigation Methods\nProperties\nswiper.nextEl\tHTMLElement\t\n\nHTMLElement of \"next\" navigation button\n\n\nswiper.prevEl\tHTMLElement\t\n\nHTMLElement of \"previous\" navigation button\n\n\nMethods\nswiper.destroy()\t\n\nDestroy navigation\n\n\nswiper.init()\t\n\nInitialize navigation\n\n\nswiper.update()\t\n\nUpdate navigation buttons state (enabled/disabled)\n\nNavigation Events\nName\tArguments\tDescription\nnavigationHide\t(swiper)\t\n\nEvent will be fired on navigation hide\n\n\nnavigationNext\t(swiper)\t\n\nEvent will be fired on navigation next button click\n\n\nnavigationPrev\t(swiper)\t\n\nEvent will be fired on navigation prev button click\n\n\nnavigationShow\t(swiper)\t\n\nEvent will be fired on navigation show\n\nNavigation CSS Custom Properties\n {\n  --swiper-navigation-size: 44px;\n  --swiper-navigation-top-offset: 50%;\n  --swiper-navigation-sides-offset: 10px;\n  --swiper-navigation-color: var(--swiper-theme-color);\n}\n\nPagination\nPagination Parameters\nName\tType\tDefault\tDescription\nbulletActiveClass\tstring\t'swiper-pagination-bullet-active'\t\n\nCSS class name of currently active pagination bullet\n\n\nbulletClass\tstring\t'swiper-pagination-bullet'\t\n\nCSS class name of single pagination bullet\n\n\nbulletElement\tstring\t'span'\t\n\nDefines which HTML tag will be used to represent single pagination bullet. Only for 'bullets' pagination type.\n\n\nclickable\tboolean\tfalse\t\n\nIf true then clicking on pagination button will cause transition to appropriate slide. Only for bullets pagination type\n\n\nclickableClass\tstring\t'swiper-pagination-clickable'\t\n\nCSS class name set to pagination when it is clickable\n\n\ncurrentClass\tstring\t'swiper-pagination-current'\t\n\nCSS class name of the element with currently active index in \"fraction\" pagination\n\n\ndynamicBullets\tboolean\tfalse\t\n\nGood to enable if you use bullets pagination with a lot of slides. So it will keep only few bullets visible at the same time.\n\n\ndynamicMainBullets\tnumber\t1\t\n\nThe number of main bullets visible when dynamicBullets enabled.\n\n\nel\tany\tnull\t\n\nString with CSS selector or HTML element of the container with pagination\n\n\nenabled\tboolean\t\t\n\nBoolean property to use with breakpoints to enable/disable pagination on certain breakpoints\n\n\nformatFractionCurrent\tfunction(number)\t\t\n\nformat fraction pagination current number. Function receives current number, and you need to return formatted value\n\n\nformatFractionTotal\tfunction(number)\t\t\n\nformat fraction pagination total number. Function receives total number, and you need to return formatted value\n\n\nhiddenClass\tstring\t'swiper-pagination-hidden'\t\n\nCSS class name of pagination when it becomes inactive\n\n\nhideOnClick\tboolean\ttrue\t\n\nToggle (hide/show) pagination container visibility after click on Slider's container\n\n\nhorizontalClass\tstring\t'swiper-pagination-horizontal'\t\n\nCSS class name set to pagination in horizontal Swiper\n\n\nlockClass\tstring\t'swiper-pagination-lock'\t\n\nCSS class name set to pagination when it is disabled\n\n\nmodifierClass\tstring\t'swiper-pagination-'\t\n\nThe beginning of the modifier CSS class name that will be added to pagination depending on parameters\n\n\npaginationDisabledClass\tstring\t'swiper-pagination-disabled'\t\n\nCSS class name added on swiper container and pagination element when pagination is disabled by breakpoint\n\n\nprogressbarFillClass\tstring\t'swiper-pagination-progressbar-fill'\t\n\nCSS class name of pagination progressbar fill element\n\n\nprogressbarOpposite\tboolean\tfalse\t\n\nMakes pagination progressbar opposite to Swiper's direction parameter, means vertical progressbar for horizontal swiper direction and horizontal progressbar for vertical swiper direction\n\n\nprogressbarOppositeClass\tstring\t'swiper-pagination-progressbar-opposite'\t\n\nCSS class name of pagination progressbar opposite\n\n\nrenderBullet\tfunction(index, className)\t\t\n\nThis parameter allows totally customize pagination bullets, you need to pass here a function that accepts index number of pagination bullet and required element class name (className). Only for 'bullets' pagination type\n\nconst swiper = new Swiper('.swiper', {\n  //...\n  renderBullet: function (index, className) {\n    return '<span class=\"' + className + '\">' + (index + 1) + '</span>';\n  }\n});\n\n\nrenderCustom\tfunction(swiper, current, total)\t\t\n\nThis parameter is required for 'custom' pagination type where you have to specify how it should be rendered.\n\nconst swiper = new Swiper('.swiper', {\n  //...\n  renderCustom: function (swiper, current, total) {\n    return current + ' of ' + total;\n  }\n});\n\n\nrenderFraction\tfunction(currentClass, totalClass)\t\t\n\nThis parameter allows to customize \"fraction\" pagination html. Only for 'fraction' pagination type\n\nconst swiper = new Swiper('.swiper', {\n  //...\n  renderFraction: function (currentClass, totalClass) {\n      return '<span class=\"' + currentClass + '\"></span>' +\n              ' of ' +\n              '<span class=\"' + totalClass + '\"></span>';\n  }\n});\n\n\nrenderProgressbar\tfunction(progressbarFillClass)\t\t\n\nThis parameter allows to customize \"progress\" pagination. Only for 'progress' pagination type\n\nconst swiper = new Swiper('.swiper', {\n  //...\n  renderProgressbar: function (progressbarFillClass) {\n      return '<span class=\"' + progressbarFillClass + '\"></span>';\n  }\n});\n\n\ntotalClass\tstring\t'swiper-pagination-total'\t\n\nCSS class name of the element with total number of \"snaps\" in \"fraction\" pagination\n\n\ntype\t'progressbar' | 'bullets' | 'fraction' | 'custom'\t'bullets'\t\n\nString with type of pagination. Can be 'bullets', 'fraction', 'progressbar' or 'custom'\n\n\nverticalClass\tstring\t'swiper-pagination-vertical'\t\n\nCSS class name set to pagination in vertical Swiper\n\nPagination Methods\nProperties\nswiper.bullets\tHTMLElement[]\t\n\nArray of pagination bullets HTML elements. To get specific slide HTMLElement use swiper.pagination.bullets[1].\n\n\nswiper.el\tHTMLElement\t\n\nHTMLElement of pagination container element\n\n\nMethods\nswiper.destroy()\t\n\nDestroy pagination\n\n\nswiper.init()\t\n\nInitialize pagination\n\n\nswiper.render()\t\n\nRender pagination layout\n\n\nswiper.update()\t\n\nUpdate pagination state (enabled/disabled/active)\n\nPagination Events\nName\tArguments\tDescription\npaginationHide\t(swiper)\t\n\nEvent will be fired on pagination hide\n\n\npaginationRender\t(swiper, paginationEl)\t\n\nEvent will be fired after pagination rendered\n\n\npaginationShow\t(swiper)\t\n\nEvent will be fired on pagination show\n\n\npaginationUpdate\t(swiper, paginationEl)\t\n\nEvent will be fired when pagination updated\n\nPagination CSS Custom Properties\n {\n  --swiper-pagination-color: var(--swiper-theme-color);\n  --swiper-pagination-left: auto;\n  --swiper-pagination-right: 8px;\n  --swiper-pagination-bottom: 8px;\n  --swiper-pagination-top: auto;\n  --swiper-pagination-fraction-color: inherit;\n  --swiper-pagination-progressbar-bg-color: rgba(0, 0, 0, 0.25);\n  --swiper-pagination-progressbar-size: 4px;\n  --swiper-pagination-bullet-size: 8px;\n  --swiper-pagination-bullet-width: 8px;\n  --swiper-pagination-bullet-height: 8px;\n  --swiper-pagination-bullet-inactive-color: #000;\n  --swiper-pagination-bullet-inactive-opacity: 0.2;\n  --swiper-pagination-bullet-opacity: 1;\n  --swiper-pagination-bullet-horizontal-gap: 4px;\n  --swiper-pagination-bullet-vertical-gap: 6px;\n}\n\nScrollbar\nScrollbar Parameters\nName\tType\tDefault\tDescription\ndragClass\tstring\t'swiper-scrollbar-drag'\t\n\nScrollbar draggable element CSS class\n\n\ndragSize\tnumber | 'auto'\t'auto'\t\n\nSize of scrollbar draggable element in px\n\n\ndraggable\tboolean\tfalse\t\n\nSet to true to enable make scrollbar draggable that allows you to control slider position\n\n\nel\tany\tnull\t\n\nString with CSS selector or HTML element of the container with scrollbar.\n\n\nenabled\tboolean\t\t\n\nBoolean property to use with breakpoints to enable/disable scrollbar on certain breakpoints\n\n\nhide\tboolean\ttrue\t\n\nHide scrollbar automatically after user interaction\n\n\nhorizontalClass\tstring\t'swiper-scrollbar-horizontal'\t\n\nCSS class name set to scrollbar in horizontal Swiper\n\n\nlockClass\tstring\t'swiper-scrollbar-lock'\t\n\nScrollbar element additional CSS class when it is disabled\n\n\nscrollbarDisabledClass\tstring\t'swiper-scrollbar-disabled'\t\n\nCSS class name added on swiper container and scrollbar element when scrollbar is disabled by breakpoint\n\n\nsnapOnRelease\tboolean\tfalse\t\n\nSet to true to snap slider position to slides when you release scrollbar\n\n\nverticalClass\tstring\t'swiper-scrollbar-vertical'\t\n\nCSS class name set to scrollbar in vertical Swiper\n\nScrollbar Methods\nProperties\nswiper.dragEl\tHTMLElement\t\n\nHTMLElement of Scrollbar draggable handler element\n\n\nswiper.el\tHTMLElement\t\n\nHTMLElement of Scrollbar container element\n\n\nMethods\nswiper.destroy()\t\n\nDestroy scrollbar\n\n\nswiper.init()\t\n\nInitialize scrollbar\n\n\nswiper.setTranslate()\t\n\nUpdates scrollbar translate\n\n\nswiper.updateSize()\t\n\nUpdates scrollbar track and handler sizes\n\nScrollbar Events\nName\tArguments\tDescription\nscrollbarDragEnd\t(swiper, event)\t\n\nEvent will be fired on draggable scrollbar drag end\n\n\nscrollbarDragMove\t(swiper, event)\t\n\nEvent will be fired on draggable scrollbar drag move\n\n\nscrollbarDragStart\t(swiper, event)\t\n\nEvent will be fired on draggable scrollbar drag start\n\nScrollbar CSS Custom Properties\n {\n  --swiper-scrollbar-border-radius: 10px;\n  --swiper-scrollbar-top: auto;\n  --swiper-scrollbar-bottom: 4px;\n  --swiper-scrollbar-left: auto;\n  --swiper-scrollbar-right: 4px;\n  --swiper-scrollbar-sides-offset: 1%;\n  --swiper-scrollbar-bg-color: rgba(0, 0, 0, 0.1);\n  --swiper-scrollbar-drag-bg-color: rgba(0, 0, 0, 0.5);\n  --swiper-scrollbar-size: 4px;\n}\n\nAutoplay\nAutoplay Parameters\nName\tType\tDefault\tDescription\ndelay\tnumber\t3000\t\n\nDelay between transitions (in ms). If this parameter is not specified, auto play will be disabled\n\nIf you need to specify different delay for specific slides you can do it by usingdata-swiper-autoplay (in ms) attribute on slide.\n\n<!-- hold this slide for 2 seconds -->\n<div class=\"swiper-slide\" data-swiper-autoplay=\"2000\">\n\n\ndisableOnInteraction\tboolean\ttrue\t\n\nSet to false and autoplay will not be disabled after user interactions (swipes), it will be restarted every time after interaction\n\n\npauseOnMouseEnter\tboolean\tfalse\t\n\nWhen enabled autoplay will be paused on pointer (mouse) enter over Swiper container.\n\n\nreverseDirection\tboolean\tfalse\t\n\nEnables autoplay in reverse direction\n\n\nstopOnLastSlide\tboolean\tfalse\t\n\nEnable this parameter and autoplay will be stopped when it reaches last slide (has no effect in loop mode)\n\n\nwaitForTransition\tboolean\ttrue\t\n\nWhen enabled autoplay will wait for wrapper transition to continue. Can be disabled in case of using Virtual Translate when your slider may not have transition\n\nAutoplay Methods\nProperties\nswiper.paused\tboolean\t\n\nWhether autoplay is paused\n\n\nswiper.running\tboolean\t\n\nWhether autoplay enabled and running\n\n\nswiper.timeLeft\tnumber\t\n\nIf autoplay is paused, it contains time left (in ms) before transition to next slide\n\n\nMethods\nswiper.pause()\t\n\nPause autoplay\n\n\nswiper.resume()\t\n\nResume autoplay\n\n\nswiper.start()\t\n\nStart autoplay\n\n\nswiper.stop()\t\n\nStop autoplay\n\nAutoplay Events\nName\tArguments\tDescription\nautoplay\t(swiper)\t\n\nEvent will be fired when slide changed with autoplay\n\n\nautoplayPause\t(swiper)\t\n\nEvent will be fired on autoplay pause\n\n\nautoplayResume\t(swiper)\t\n\nEvent will be fired on autoplay resume\n\n\nautoplayStart\t(swiper)\t\n\nEvent will be fired in when autoplay started\n\n\nautoplayStop\t(swiper)\t\n\nEvent will be fired when autoplay stopped\n\n\nautoplayTimeLeft\t(swiper, timeLeft, percentage)\t\n\nEvent triggers continuously while autoplay is enabled. It contains time left (in ms) before transition to next slide and percentage of that time related to autoplay delay\n\nFree Mode\nFree Mode Parameters\nName\tType\tDefault\tDescription\nenabled\tboolean\tfalse\t\n\nWhether the free mode is enabled\n\n\nminimumVelocity\tnumber\t0.02\t\n\nMinimum touchmove-velocity required to trigger free mode momentum\n\n\nmomentum\tboolean\ttrue\t\n\nIf enabled, then slide will keep moving for a while after you release it\n\n\nmomentumBounce\tboolean\ttrue\t\n\nSet to false if you want to disable momentum bounce in free mode\n\n\nmomentumBounceRatio\tnumber\t1\t\n\nHigher value produces larger momentum bounce effect\n\n\nmomentumRatio\tnumber\t1\t\n\nHigher value produces larger momentum distance after you release slider\n\n\nmomentumVelocityRatio\tnumber\t1\t\n\nHigher value produces larger momentum velocity after you release slider\n\n\nsticky\tboolean\tfalse\t\n\nSet to enabled to enable snap to slides positions in free mode\n\nGrid\nGrid Parameters\nName\tType\tDefault\tDescription\nfill\t'row' | 'column'\t'column'\t\n\nCan be 'column' or 'row'. Defines how slides should fill rows, by column or by row\n\nif used with loop mode make sure number of slides is even specified in loop mode requirements, or enable loopAddBlankSlides parameter\n\n\nrows\tnumber\t1\t\n\nNumber of slides rows, for multirow layout\n\nManipulation\n\nManipulation module adds useful Swiper methods to manipulate slides. It makes sense to use it only with Swiper Core version, not intended to be uses with Swiper React or Vue.\n\nManipulation Methods\nMethods\nswiper.addSlide(index, slides)\t\n\nAdd new slides to the required index. slides could be HTMLElement or HTML string with new slide or array with such slides, for example:\n\naddSlide(1, '<div class=\"swiper-slide\">Slide 10\"</div>')\n\naddSlide(1, [\n '<div class=\"swiper-slide\">Slide 10\"</div>',\n '<div class=\"swiper-slide\">Slide 11\"</div>'\n]);\n\n\nswiper.appendSlide(slides)\t\n\nAdd new slides to the end. slides could be HTMLElement or HTML string with new slide or array with such slides, for example:\n\nappendSlide('<div class=\"swiper-slide\">Slide 10\"</div>')\n\nappendSlide([\n '<div class=\"swiper-slide\">Slide 10\"</div>',\n '<div class=\"swiper-slide\">Slide 11\"</div>'\n]);\n\n\nswiper.prependSlide(slides)\t\n\nAdd new slides to the beginning. slides could be HTMLElement or HTML string with new slide or array with such slides, for example:\n\nprependSlide('<div class=\"swiper-slide\">Slide 0\"</div>')\n\nprependSlide([\n '<div class=\"swiper-slide\">Slide 1\"</div>',\n '<div class=\"swiper-slide\">Slide 2\"</div>'\n]);\n\n\nswiper.removeAllSlides()\t\n\nRemove all slides\n\n\nswiper.removeSlide(slideIndex)\t\n\nRemove selected slides. slideIndex could be a number with slide index to remove or array with indexes.\n\nremoveSlide(0); // remove first slide\nremoveSlide([0, 1]); // remove first and second slides\nremoveAllSlides();    // Remove all slides\n\nParallax\n\nSwiper supports parallax transition effects for swiper/slides nested elements. There are two types of parallax elements supported:\n\nDirect child elements of swiper. Parallax effect for such elements will depend on total slider progress. Useful for parallax backgrounds\nSlides child elements. Parallax effect for such elements will depend on slide progress\n\nTo enable parallax effects you need to init Swiper with passed parallax:true parameter and add one of the following (or mix) attributes to required elements:\n\ndata-swiper-parallax - enable transform-translate parallax transition. This attribute may accept:\nnumber - value in px (as for title, subtitle in example above) to move element depending on progress. In this case such element will be moved on Â± this value in px depending on slide position (next or previous)\npercentage - (as for \"parallax-bg\") to move element depending on progress and on its size. In this case such element will be moved on Â± this percentage of its size (width in horizontal direction, and height in vertical direction) depending on slide position (next or previous). So if element has 400px width and you specified data-swiper-parallax=\"50%\" then it will be moved on Â± 200px\ndata-swiper-parallax-x - same but for x-axis direction\ndata-swiper-parallax-y - same but for y-axis direction\ndata-swiper-parallax-scale - scale ratio of the parallax element when it is in \"inactive\" (not on active slide) state\ndata-swiper-parallax-opacity - opacity of the parallax element when it is in \"inactive\" (not on active slide) state\ndata-swiper-parallax-duration - custom transition duration for parallax elements\n<div class=\"swiper\">\n  <!-- Parallax background element -->\n  <div\n    class=\"parallax-bg\"\n    style=\"background-image:url(path/to/image.jpg)\"\n    data-swiper-parallax=\"-23%\"\n  ></div>\n  <div class=\"swiper-wrapper\">\n    <div class=\"swiper-slide\">\n      <!-- Each slide has parallax title -->\n      <div class=\"title\" data-swiper-parallax=\"-100\">Slide 1</div>\n      <!-- Parallax subtitle -->\n      <div class=\"subtitle\" data-swiper-parallax=\"-200\">Subtitle</div>\n      <!-- And parallax text with custom transition duration -->\n      <div\n        class=\"text\"\n        data-swiper-parallax=\"-300\"\n        data-swiper-parallax-duration=\"600\"\n      >\n        <p>Lorem ipsum dolor sit amet, ...</p>\n      </div>\n      <!-- Opacity parallax -->\n      <div data-swiper-parallax-opacity=\"0.5\">I will change opacity</div>\n      <!-- Scale parallax -->\n      <div data-swiper-parallax-scale=\"0.15\">I will change scale</div>\n    </div>\n    ...\n  </div>\n</div>\n\nParallax Parameters\nName\tType\tDefault\tDescription\nenabled\tboolean\tfalse\t\n\nEnable, if you want to use \"parallaxed\" elements inside of slider\n\nLazy Loading\n\nSince version 9 Swiper doesn't have a specific lazy loading API, as it relies on native browser lazy loading feature. To use lazy loading, we just need to set loading=\"lazy\" on images and add preloader element:\n\n<div class=\"swiper\">\n  <div class=\"swiper-wrapper\">\n    <!-- Lazy image -->\n    <div class=\"swiper-slide\">\n      <img src=\"path/to/picture-1.jpg\" loading=\"lazy\" />\n      <div class=\"swiper-lazy-preloader\"></div>\n    </div>\n\n    <!-- Lazy image with srcset -->\n    <div class=\"swiper-slide\">\n      <img\n        src=\"path/to/logo-small.png\"\n        srcset=\"path/to/logo-large.png 2x\"\n        loading=\"lazy\"\n      />\n      <div class=\"swiper-lazy-preloader\"></div>\n    </div>\n  </div>\n</div>\n\n\nAs you see:\n\nLazy image must have loading=\"lazy\" attribute\nAdd animated preloader spinner to slide which will be removed automatically after image loaded:\n<div class=\"swiper-lazy-preloader\"></div>\n\n\nOr white one for dark layout:\n\n<div class=\"swiper-lazy-preloader swiper-lazy-preloader-white\"></div>\n\nFade Effect\n\nBe sure to have the effect param set to 'fade' in order for this to work.\n\nNote that crossFade should be set to true in order to avoid seeing content behind or underneath.\nFade Effect Parameters\nName\tType\tDefault\tDescription\ncrossFade\tboolean\tfalse\t\n\nEnables slides cross fade\n\nCoverflow Effect\n\nBe sure to have the effect param set to 'coverflow' in order for this to work.\n\nCoverflow Effect Parameters\nName\tType\tDefault\tDescription\ndepth\tnumber\t100\t\n\nDepth offset in px (slides translate in Z axis)\n\n\nmodifier\tnumber\t1\t\n\nEffect multiplier\n\n\nrotate\tnumber\t50\t\n\nSlide rotate in degrees\n\n\nscale\tnumber\t1\t\n\nSlide scale effect\n\n\nslideShadows\tboolean\ttrue\t\n\nEnables slides shadows\n\n\nstretch\tnumber\t0\t\n\nStretch space between slides (in px)\n\nFlip Effect\n\nBe sure to have the effect param set to 'flip' in order for this to work.\n\nFlip Effect Parameters\nName\tType\tDefault\tDescription\nlimitRotation\tboolean\ttrue\t\n\nLimit edge slides rotation\n\n\nslideShadows\tboolean\ttrue\t\n\nEnables slides shadows\n\nCube Effect\n\nBe sure to have the effect param set to 'cube' in order for this to work.\n\nCube Effect Parameters\nName\tType\tDefault\tDescription\nshadow\tboolean\ttrue\t\n\nEnables main slider shadow\n\n\nshadowOffset\tnumber\t20\t\n\nMain shadow offset in px\n\n\nshadowScale\tnumber\t0.94\t\n\nMain shadow scale ratio\n\n\nslideShadows\tboolean\ttrue\t\n\nEnables slides shadows\n\nCards Effect\n\nBe sure to have the effect param set to 'cards' in order for this to work.\n\nCards Effect Parameters\nName\tType\tDefault\tDescription\nperSlideOffset\tnumber\t8\t\n\nOffset distance per slide (in px)\n\n\nperSlideRotate\tnumber\t2\t\n\nRotate angle per slide (in degrees)\n\n\nrotate\tboolean\ttrue\t\n\nEnables cards rotation\n\n\nslideShadows\tboolean\ttrue\t\n\nEnables slides shadows\n\nCreative Effect\n\nBe sure to have the effect param set to 'creative' in order for this to work.\n\nCreative Effect Parameters\nName\tType\tDefault\tDescription\nlimitProgress\tnumber\t1\t\n\nLimit progress/offset to amount of side slides. If 1, then slides all slides after prev/next will have same state. If 2, then all slides after 2nd before/after active will have same state, etc.\n\n\nnext\tCreativeEffectTransform\t\t\n\nNext slide transformations.\n\n{\n  // Array with translate X, Y and Z values\n  translate: (string | number)[];\n  // Array with rotate X, Y and Z values (in deg)\n  rotate?: number[];\n  // Slide opacity\n  opacity?: number;\n  // Slide scale\n  scale?: number;\n  // Enables slide shadow\n  shadow?: boolean;\n  // Transform origin, e.g. `left bottom`\n  origin?: string;\n}\n\n\nperspective\tboolean\ttrue\t\n\nEnable this parameter if your custom transforms require 3D transformations (translateZ, rotateX, rotateY )\n\n\nprev\tCreativeEffectTransform\t\t\n\nPrevious slide transformations. Accepts object of the following type:\n\n{\n  // Array with translate X, Y and Z values\n  translate: (string | number)[];\n  // Array with rotate X, Y and Z values (in deg)\n  rotate?: number[];\n  // Slide opacity\n  opacity?: number;\n  // Slide scale\n  scale?: number;\n  // Enables slide shadow\n  shadow?: boolean;\n  // Transform origin, e.g. `left bottom`\n  origin?: string;\n}\n\n\nprogressMultiplier\tnumber\t1\t\n\nAllows to multiply slides transformations and opacity.\n\n\nshadowPerProgress\tboolean\tfalse\t\n\nSplits shadow \"opacity\" per slide based on limitProgress (only if transformation shadows enabled). E.g. setting limitProgress: 2 and enabling shadowPerProgress, will set shadow opacity to 0.5 and 1 on two slides next to active. With this parameter disabled, all slides beside active will have shadow with 1 opacity\n\nThumbs\n\nIn addition to Controller component Swiper comes with Thumbs component that is designed to work with additional thumbs swiper in a more correct way than Controller which is used for syncing two swipers.\n\nThumbs Parameters\nName\tType\tDefault\tDescription\nautoScrollOffset\tnumber\t0\t\n\nAllows to set on which thumbs active slide from edge it should automatically move scroll thumbs. For example, if set to 1 and last visible thumb will be activated (1 from edge) it will auto scroll thumbs\n\n\nmultipleActiveThumbs\tboolean\ttrue\t\n\nWhen enabled multiple thumbnail slides may get activated\n\n\nslideThumbActiveClass\tstring\t'swiper-slide-thumb-active'\t\n\nAdditional class that will be added to activated thumbs swiper slide\n\n\nswiper\tany\tnull\t\n\nSwiper instance of swiper used as thumbs or object with Swiper parameters to initialize thumbs swiper\n\n\nthumbsContainerClass\tstring\t'swiper-thumbs'\t\n\nAdditional class that will be added to thumbs swiper\n\nThumbs Methods\nProperties\nswiper.swiper\tany\t\n\nSwiper instance of thumbs swiper\n\n\nMethods\nswiper.init()\t\n\nInitialize thumbs\n\n\nswiper.update(initial)\t\n\nUpdate thumbs\n\nZoom\n\nSwiper supports zoom images functionality (similar to what you see on iOS when browsing single photo) where you can zoom-in image by pinch gesture and or by zoom-in/out by double tap on it. In this case, additional layout is required:\n\n<div class=\"swiper\">\n  <div class=\"swiper-wrapper\">\n    <div class=\"swiper-slide\">\n      <div class=\"swiper-zoom-container\">\n        <img src=\"path/to/image1.jpg\" />\n      </div>\n    </div>\n    <div class=\"swiper-slide\">\n      <div class=\"swiper-zoom-container\">\n        <img src=\"path/to/image2.jpg\" />\n      </div>\n    </div>\n    <div class=\"swiper-slide\">Plain slide with text</div>\n    <div class=\"swiper-slide\">\n      <!-- Override maxRatio parameter -->\n      <div class=\"swiper-zoom-container\" data-swiper-zoom=\"5\">\n        <img src=\"path/to/image1.jpg\" />\n      </div>\n    </div>\n  </div>\n</div>\n\nAll \"zoomable\" images should be wrapped with the div with swiper-zoom-container class.\nBy default it expects to zoom one of the img, picture or canvas element. If you want to make zoom on some other custom element, then just add swiper-zoom-target class to this element. For example:\n<div class=\"swiper\">\n  <div class=\"swiper-wrapper\">\n    <div class=\"swiper-slide\">\n      <div class=\"swiper-zoom-container\">\n        <!-- custom zoomable element -->\n        <div\n          class=\"swiper-zoom-target\"\n          style=\"background-image: url(...)\"\n        ></div>\n      </div>\n    </div>\n  </div>\n</div>\n\nYou can override maxRatio parameter for specific slides by using data-swiper-zoom attribute on zoom container.\nZoom Parameters\nName\tType\tDefault\tDescription\ncontainerClass\tstring\t'swiper-zoom-container'\t\n\nCSS class name of zoom container\n\n\nlimitToOriginalSize\tboolean\tfalse\t\n\nWhen set to true, the image will not be scaled past 100% of its original size\n\n\nmaxRatio\tnumber\t3\t\n\nMaximum image zoom multiplier\n\n\nminRatio\tnumber\t1\t\n\nMinimal image zoom multiplier\n\n\ntoggle\tboolean\ttrue\t\n\nEnable/disable zoom-in by slide's double tap\n\n\nzoomedSlideClass\tstring\t'swiper-slide-zoomed'\t\n\nCSS class name of zoomed in container\n\nZoom Methods\nProperties\nswiper.enabled\tboolean\t\n\nWhether the zoom module is enabled\n\n\nswiper.scale\tnumber\t\n\nCurrent image scale ratio\n\n\nMethods\nswiper.disable()\t\n\nDisable zoom module\n\n\nswiper.enable()\t\n\nEnable zoom module\n\n\nswiper.in(ratio)\t\n\nZoom in image of the currently active slide. Optionally accepts custom zoom ratio\n\n\nswiper.out()\t\n\nZoom out image of the currently active slide\n\n\nswiper.toggle(event)\t\n\nToggle image zoom of the currently active slide\n\nZoom Events\nName\tArguments\tDescription\nzoomChange\t(swiper, scale, imageEl, slideEl)\t\n\nEvent will be fired on zoom change\n\nKeyboard Control\nKeyboard Control Parameters\nName\tType\tDefault\tDescription\nenabled\tboolean\tfalse\t\n\nSet to true to enable keyboard control\n\n\nonlyInViewport\tboolean\ttrue\t\n\nWhen enabled it will control sliders that are currently in viewport\n\n\npageUpDown\tboolean\ttrue\t\n\nWhen enabled it will enable keyboard navigation by Page Up and Page Down keys\n\nKeyboard Control Methods\nProperties\nswiper.enabled\tboolean\t\n\nWhether the keyboard control is enabled\n\n\nMethods\nswiper.disable()\t\n\nDisable keyboard control\n\n\nswiper.enable()\t\n\nEnable keyboard control\n\nKeyboard Events\nName\tArguments\tDescription\nkeyPress\t(swiper, keyCode)\t\n\nEvent will be fired on key press\n\nMousewheel Control\nMousewheel Control Parameters\nName\tType\tDefault\tDescription\nenabled\tboolean\tfalse\t\n\nSet to true to enable mousewheel control\n\n\neventsTarget\tany\t'container'\t\n\nString with CSS selector or HTML element of the container accepting mousewheel events. By default it is swiper\n\n\nforceToAxis\tboolean\tfalse\t\n\nSet to true to force mousewheel swipes to axis. So in horizontal mode mousewheel will work only with horizontal mousewheel scrolling, and only with vertical scrolling in vertical mode.\n\n\ninvert\tboolean\tfalse\t\n\nSet to true to invert sliding direction\n\n\nnoMousewheelClass\tstring\t'swiper-no-mousewheel'\t\n\nScrolling on elements with this class will be ignored\n\n\nreleaseOnEdges\tboolean\tfalse\t\n\nSet to true and swiper will release mousewheel event and allow page scrolling when swiper is on edge positions (in the beginning or in the end)\n\n\nsensitivity\tnumber\t1\t\n\nMultiplier of mousewheel data, allows to tweak mouse wheel sensitivity\n\n\nthresholdDelta\tnull | number\tnull\t\n\nMinimum mousewheel scroll delta to trigger swiper slide change\n\n\nthresholdTime\tnull | number\tnull\t\n\nMinimum mousewheel scroll time delta (in ms) to trigger swiper slide change\n\nMousewheel Control Methods\nProperties\nswiper.enabled\tboolean\t\n\nWhether the mousewheel control is enabled\n\n\nMethods\nswiper.disable()\t\n\nDisable mousewheel control\n\n\nswiper.enable()\t\n\nEnable mousewheel control\n\nMousewheel Events\nName\tArguments\tDescription\nscroll\t(swiper, event)\t\n\nEvent will be fired on mousewheel scroll\n\nVirtual Slides\n\nVirtual Slides module allows to keep just required amount of slides in DOM. It is very useful in terms in performance and memory issues if you have a lot of slides, especially slides with heavyweight DOM tree or images.\n\nNote that according to Virtual Slides realization it doesn't work with Grid module and slidesPerView: 'auto'\nVirtual Slides Parameters\nName\tType\tDefault\tDescription\naddSlidesAfter\tnumber\t0\t\n\nIncreases amount of pre-rendered slides after active slide\n\n\naddSlidesBefore\tnumber\t0\t\n\nIncreases amount of pre-rendered slides before active slide\n\n\ncache\tboolean\ttrue\t\n\nEnables DOM cache of rendering slides html elements. Once they are rendered they will be saved to cache and reused from it.\n\n\nenabled\tboolean\tfalse\t\n\nWhether the virtual slides are enabled\n\n\nrenderExternal\tfunction(data)\t\t\n\nFunction for external rendering (e.g. using some other library to handle DOM manipulations and state like React.js or Vue.js). As an argument it accepts data object with the following properties:\n\noffset - slides left/top offset in px\nfrom - index of first slide required to be rendered\nto - index of last slide required to be rendered\nslides - array with slide items to be rendered\n\nrenderExternalUpdate\tboolean\ttrue\t\n\nWhen enabled (by default) it will update Swiper layout right after renderExternal called. Useful to disable and update swiper manually when used with render libraries that renders asynchronously\n\n\nrenderSlide\tfunction(slide, index)\t\t\n\nFunction to render slide. As an argument it accepts current slide item for slides array and index number of the current slide. Function must return an outer HTML of the swiper slide or slide HTML element.\n\n\nslides\tT[]\t[]\t\n\nArray with slides\n\nVirtual Slides Methods\nProperties\nswiper.cache\tobject\t\n\nObject with cached slides HTML elements\n\n\nswiper.from\tnumber\t\n\nIndex of first rendered slide\n\n\nswiper.slides\tT[]\t\n\nArray with slide items passed by virtual.slides parameter\n\n\nswiper.to\tnumber\t\n\nIndex of last rendered slide\n\n\nMethods\nswiper.appendSlide(slide)\t\n\nAppend slide. slides can be a single slide item or array with such slides.\n\nOnly for Core version (in React & Vue it should be done by modifying slides array/data/source)\n\n\nswiper.prependSlide(slide)\t\n\nPrepend slide. slides can be a single slide item or array with such slides.\n\nOnly for Core version (in React & Vue it should be done by modifying slides array/data/source)\n\n\nswiper.removeAllSlides()\t\n\nRemove all slides\n\nOnly for Core version (in React & Vue it should be done by modifying slides array/data/source)\n\n\nswiper.removeSlide(slideIndexes)\t\n\nRemove specific slide or slides. slideIndexes can be a number with slide index to remove or array with indexes.\n\nOnly for Core version (in React & Vue it should be done by modifying slides array/data/source)\n\n\nswiper.update(force)\t\n\nUpdate virtual slides state\n\nVirtual Slides Dom\n\nSince version 9, Swiper virtual slides can work with slides originally rendered in DOM. On initialize it will remove them from DOM, cache and then re-use the ones which are required:\n\n<div class=\"swiper\">\n  <div class=\"swiper-wrapper\">\n    <div class=\"swiper-slide\">Slide 1</div>\n    <div class=\"swiper-slide\">Slide 2</div>\n    ...\n    <div class=\"swiper-slide\">Slide 100</div>\n  </div>\n</div>\n<script>\n  const swiper = new Swiper('.swiper', {\n    virtual: {\n      enabled: true,\n    },\n  });\n</script>\n\nHash Navigation\n\nHash navigation is intended to have a link to specific slide that allows to load page with specific slide opened.\n\nTo make it work, you need to enable it by passing hashNavigation:true parameter and adding slides hashes in data-hash attribute:\n\n<div class=\"swiper\">\n  <div class=\"swiper-wrapper\">\n    <div class=\"swiper-slide\" data-hash=\"slide1\">Slide 1</div>\n    <div class=\"swiper-slide\" data-hash=\"slide2\">Slide 2</div>\n    <div class=\"swiper-slide\" data-hash=\"slide3\">Slide 3</div>\n    <div class=\"swiper-slide\" data-hash=\"slide4\">Slide 4</div>\n    <div class=\"swiper-slide\" data-hash=\"slide5\">Slide 5</div>\n    ...\n  </div>\n</div>\n\nconst swiper = new Swiper('.swiper', {\n  //enable hash navigation\n  hashNavigation: true,\n});\n\nHash Navigation Parameters\nName\tType\tDefault\tDescription\ngetSlideIndex\tfunction(swiper, hash)\t\t\n\nDesigned to be used with Virtual slides when it is impossible to find slide in DOM by hash (e.g. not yet rendered)\n\n\nreplaceState\tboolean\tfalse\t\n\nWorks in addition to hashnav to replace current url state with the new one instead of adding it to history\n\n\nwatchState\tboolean\tfalse\t\n\nSet to true to enable also navigation through slides (when hashnav is enabled) by browser history or by setting directly hash on document location\n\nHash Navigation Events\nName\tArguments\tDescription\nhashChange\t(swiper)\t\n\nEvent will be fired on window hash change\n\n\nhashSet\t(swiper)\t\n\nEvent will be fired when swiper updates the hash\n\nHistory Navigation\nHistory Navigation Parameters\nName\tType\tDefault\tDescription\nenabled\tboolean\tfalse\t\n\nEnables History Plugin.\n\n\nkeepQuery\tboolean\tfalse\t\n\nKeep query parameters when changing browser url.\n\n\nkey\tstring\t'slides'\t\n\nUrl key for slides\n\n\nreplaceState\tboolean\tfalse\t\n\nWorks in addition to hashnav or history to replace current url state with the new one instead of adding it to history\n\n\nroot\tstring\t''\t\n\nSwiper page root, useful to specify when you use Swiper history mode not on root website page. For example can be https://my-website.com/ or https://my-website.com/subpage/ or /subpage/\n\nController\nController Parameters\nName\tType\tDefault\tDescription\nby\t'slide' | 'container'\t'slide'\t\n\nDefines a way how to control another slider: slide by slide (with respect to other slider's grid) or depending on all slides/container (depending on total slider percentage).\n\n\ncontrol\tany\t\t\n\nPass here another Swiper instance or array with Swiper instances that should be controlled by this Swiper. Also accepts string with CSS selector of Swiper element, or HTMLElement of Swiper element\n\n\ninverse\tboolean\tfalse\t\n\nSet to true and controlling will be in inverse direction\n\nController Methods\nProperties\nswiper.control\tany\t\n\nPass here another Swiper instance or array with Swiper instances that should be controlled by this Swiper\n\nAccessibility (a11y)\nAccessibility Parameters\nName\tType\tDefault\tDescription\ncontainerMessage\tnull | string\tnull\t\n\nMessage for screen readers for outer swiper container\n\n\ncontainerRoleDescriptionMessage\tnull | string\tnull\t\n\nMessage for screen readers describing the role of outer swiper container\n\n\nenabled\tboolean\ttrue\t\n\nEnables A11y\n\n\nfirstSlideMessage\tstring\t'This is the first slide'\t\n\nMessage for screen readers for previous button when swiper is on first slide\n\n\nid\tnull | string | number\tnull\t\n\nValue of id attribute to be set on swiper-wrapper. If null will be generated automatically\n\n\nitemRoleDescriptionMessage\tnull | string\tnull\t\n\nMessage for screen readers describing the role of slide element\n\n\nlastSlideMessage\tstring\t'This is the last slide'\t\n\nMessage for screen readers for next button when swiper is on last slide\n\n\nnextSlideMessage\tstring\t'Next slide'\t\n\nMessage for screen readers for next button\n\n\nnotificationClass\tstring\t'swiper-notification'\t\n\nCSS class name of A11y notification\n\n\npaginationBulletMessage\tstring\t'Go to slide {{index}}'\t\n\nMessage for screen readers for single pagination bullet\n\n\nprevSlideMessage\tstring\t'Previous slide'\t\n\nMessage for screen readers for previous button\n\n\nslideLabelMessage\tstring\t'{{index}} / {{slidesLength}}'\t\n\nMessage for screen readers describing the label of slide element\n\n\nslideRole\tstring\t'group'\t\n\nValue of swiper slide role attribute\n\nCustom Build\n\nYou have two options of making custom version of Swiper.\n\nUsing JS Modules\n\nIf you use bundler with JS modules support in your project you can import only the modules you need:\n\n// Import Swiper and modules\nimport Swiper from 'swiper';\nimport { Navigation, Pagination, Scrollbar } from 'swiper/modules';\n\n// Now you can use Swiper\nconst swiper = new Swiper('.swiper', {\n  // Install modules\n  modules: [Navigation, Pagination, Scrollbar],\n  speed: 500,\n  navigation: {\n    nextEl: '.swiper-button-next',\n    prevEl: '.swiper-button-prev',\n  },\n  // ...\n});\n\n\nThe following modules are exported:\n\nVirtual - Virtual Slides module\nKeyboard - Keyboard Control module\nMousewheel - Mousewheel Control module\nNavigation - Navigation module\nPagination - Pagination module\nScrollbar - Scrollbar module\nParallax - Parallax module\nFreeMode - Free Mode module\nGrid - Grid module\nManipulation - Slides manipulation module (only for Core version)\nZoom - Zoom module\nController - Controller module\nA11y - Accessibility module\nHistory - History Navigation module\nHashNavigation - Hash Navigation module\nAutoplay - Autoplay module\nEffectFade - Fade Effect module\nEffectCube - Cube Effect module\nEffectFlip - Flip Effect module\nEffectCoverflow - Coverflow Effect module\nEffectCards - Cards Effect module\nEffectCreative - Creative Effect module\nThumbs - Thumbs module\nUsing Build Script\n\nSwiper comes with gulp builder that allows to build custom library version where you may include only required modules. We need the following:\n\nDownload and unzip Swiper GitHub repository to local folder\n\nInstall Node.js (if not installed)\n\nNow, we need to install required dependencies. Go to the folder with downloaded and unzipped Swiper repository and execute in terminal:\n\n$ npm install\n\n\nOpen scripts/build-config.js file:\n\nmodule.exports = {\n  // remove modules you don't need\n  modules: [\n    'virtual',\n    'keyboard',\n    'mousewheel',\n    'navigation',\n    'pagination',\n    'scrollbar',\n    'parallax',\n    'zoom',\n    'controller',\n    'a11y',\n    'history',\n    'hash-navigation',\n    'autoplay',\n    'thumbs',\n    'free-mode',\n    'grid',\n    'manipulation',\n    'effect-fade',\n    'effect-cube',\n    'effect-flip',\n    'effect-coverflow',\n    'effect-creative',\n    'effect-cards',\n  ],\n};\n\n\nNow, we are ready to build custom version of Swiper:\n\n$ npm run build:prod\n\n\nThat is all. Generated CSS and JS files and their minified versions will be available in dist/ folder.\n\nTypeScript Definitions\n\nSwiper is fully typed, it exports Swiper and SwiperOptions types:\n\n// main.ts\nimport Swiper from 'swiper';\nimport { SwiperOptions } from 'swiper/types';\n\nconst swiperParams: SwiperOptions = {\n  slidesPerView: 3,\n  spaceBetween: 50,\n};\n\nconst swiper = new Swiper('.swiper', swiperParams);\n\n\nYou can also check auto generated TypeScript definitions explorer for all the types, options, properties and methods.\n\nEdit this page on GitHub\n2024 Â© Swiper by "
  }
]