[
  {
    "title": "Swiper Element (WebComponent)",
    "url": "https://swiperjs.com/element",
    "html": "Swiper\nv11.0.7\nSearch\nâŒ˜\nK\nDocs\nResources\nPremium\nstars\nSponsors\nBecome a sponsor\nInstallation\nInstall & Register from NPM\nSwiper Custom Elements from CDN\nUsage\nParameters As Attributes\nParameters As Props\nUpdating Parameters\nAccess To Swiper Instance\nEvents\nPagination, Navigation, Scrollbar\nLazy\nVirtual Slides\nThumbs\nController\nInjecting Styles\nCore Version & Modules\nSlots\nParts\nRegister Parameters\nUsage with React\nUsage with Vue\nUsage with Svelte\nUsage with Solid\nWhat next?\nSwiper Element (WebComponent)\n\nSwiper web components are available since Swiper version 9.\n\nCustom elements are supported in all major browsers and by almost every framework.\n\nInstallation\n\nThere are few options on how to install Swiper Element into your project:\n\nInstall & Register from NPM\n\nWe can install Swiper from NPM\n\n$ npm install swiper\n\n\nWhen you import Swiper custom elements from node modules, we need to manually register it. It should be done only once and it registers Swiper custom elements globally.\n\n// import function to register Swiper custom elements\nimport { register } from 'swiper/element/bundle';\n// register Swiper custom elements\nregister();\n\nSwiper Custom Elements from CDN\n\nYou can also install it from CDN by directly adding it to the website with <script> tag:\n\n<script src=\"https://cdn.jsdelivr.net/npm/swiper@11/swiper-element-bundle.min.js\"></script>\n\n\nIn this case, it will be automatically registered, no need to call register()\n\nUsage\n\nAfter we install Swiper Element (via node modules and calling register() or by including a script tag), there are 2 web components (custom elements) available for usage:\n\n<swiper-container> - main Swiper element where you define all parameters\n<swiper-slide> - Swiper slide element\n<swiper-container>\n  <swiper-slide>Slide 1</swiper-slide>\n  <swiper-slide>Slide 2</swiper-slide>\n  <swiper-slide>Slide 3</swiper-slide>\n  ...\n</swiper-container>\n\nParameters As Attributes\n\nAll Swiper parameters are available in a form of kebab-case attributes on <swiper-container>, for example:\n\n<swiper-container slides-per-view=\"3\" speed=\"500\" loop=\"true\" css-mode=\"true\">\n  <swiper-slide>Slide 1</swiper-slide>\n  <swiper-slide>Slide 2</swiper-slide>\n  <swiper-slide>Slide 3</swiper-slide>\n  ...\n</swiper-container>\n\n\nAll parameters that are passed as objects also can be passed as attributes in a form of [key]-[subkey]=\"value\".\n\nFor example, such configuration:\n\nnew Swiper('.swiper', {\n  slidesPerView: 3,\n  grid: {\n    rows: 3,\n  },\n  mousewheel: {\n    forceToAxis: true,\n  },\n});\n\n\nshould be passed in this way:\n\n<swiper-container\n  slides-per-view=\"3\"\n  grid-rows=\"3\"\n  mousewheel-force-to-axis=\"true\"\n>\n  <swiper-slide>Slide 1</swiper-slide>\n  <swiper-slide>Slide 2</swiper-slide>\n  <swiper-slide>Slide 3</swiper-slide>\n  ...\n</swiper-container>\n\nParameters As Props\n\nIn some more complex cases when we have more complex parameters objects (like with breakpoints), we can pass all parameters as HTMLElement properties.\n\nHere, we need to add init=\"false\" attribute to prevent Swiper from initialization until we pass all required parameters.\n\n<!-- Add init=\"false\" -->\n<swiper-container init=\"false\">\n  <swiper-slide>Slide 1</swiper-slide>\n  <swiper-slide>Slide 2</swiper-slide>\n  <swiper-slide>Slide 3</swiper-slide>\n  ...\n</swiper-container>\n<script>\n  // swiper element\n  const swiperEl = document.querySelector('swiper-container');\n\n  // swiper parameters\n  const swiperParams = {\n    slidesPerView: 1,\n    breakpoints: {\n      640: {\n        slidesPerView: 2,\n      },\n      1024: {\n        slidesPerView: 3,\n      },\n    },\n    on: {\n      init() {\n        // ...\n      },\n    },\n  };\n\n  // now we need to assign all parameters to Swiper element\n  Object.assign(swiperEl, swiperParams);\n\n  // and now initialize it\n  swiperEl.initialize();\n</script>\n\nUpdating Parameters\n\nSwiper parameters can be updated by directly changing Swiper element attributes or HTMLElement properties (if it was initialized with props);\n\n<swiper-container slides-per-view=\"1\">\n  <swiper-slide>Slide 1</swiper-slide>\n  <swiper-slide>Slide 2</swiper-slide>\n  <swiper-slide>Slide 3</swiper-slide>\n  ...\n</swiper-container>\n\n<button>Update</button>\n\n<script>\n  const swiperEl = document.querySelector('swiper-container');\n  const buttonEl = document.querySelector('button');\n\n  buttonEl.addEventListener('click', () => {\n    // if it was initialized with attributes\n    swiperEl.setAttribute('slides-per-view', '3');\n\n    // or if it was initialized with props\n    swiperEl.slidesPerView = 3;\n  });\n</script>\n\nAccess To Swiper Instance\n\nInitialized Swiper instance is available as swiper prop of Swiper's HTMLElement:\n\n<swiper-container slides-per-view=\"1\">\n  <swiper-slide>Slide 1</swiper-slide>\n  <swiper-slide>Slide 2</swiper-slide>\n  <swiper-slide>Slide 3</swiper-slide>\n  ...\n</swiper-container>\n\n<button>Slide Next</button>\n\n<script>\n  const swiperEl = document.querySelector('swiper-container');\n  const buttonEl = document.querySelector('button');\n\n  buttonEl.addEventListener('click', () => {\n    swiperEl.swiper.slideNext();\n  });\n</script>\n\nEvents\n\nAll Swiper events are available as native DOM events but with lowercase names and swiper prefix (configurable via events-prefix parameter). E.g. slideChange becomes swiperslidechange.\n\nAll event handler arguments are passed as array in event.detail:\n\n<swiper-container>\n  <swiper-slide>Slide 1</swiper-slide>\n  <swiper-slide>Slide 2</swiper-slide>\n  <swiper-slide>Slide 3</swiper-slide>\n  ...\n</swiper-container>\n\n<script>\n  const swiperEl = document.querySelector('swiper-container');\n\n  swiperEl.addEventListener('swiperprogress', (event) => {\n    const [swiper, progress] = event.detail;\n  });\n\n  swiperEl.addEventListener('swiperslidechange', (event) => {\n    console.log('slide changed');\n  });\n</script>\n\n\nIt is also possible to prefix emitted events names to prevent clashing with other libs or native events using events-prefix attribute/parameter:\n\n<swiper-container events-prefix=\"swiper-\">\n  <swiper-slide>Slide 1</swiper-slide>\n  <swiper-slide>Slide 2</swiper-slide>\n  <swiper-slide>Slide 3</swiper-slide>\n  ...\n</swiper-container>\n\n<script>\n  const swiperEl = document.querySelector('swiper-container');\n\n  swiperEl.addEventListener('swiper-progress', (event) => {\n    const [swiper, progress] = event.detail;\n  });\n\n  swiperEl.addEventListener('swiper-slidechange', (event) => {\n    console.log('slide changed');\n  });\n</script>\n\nPagination, Navigation, Scrollbar\n\nIf you don't pass these modules elements in parameters (e.g. scrollbar.el, pagination.el), it will render them automatically, if module parameter is specified:\n\n<!-- enable navigation, pagination, scrollbar -->\n<swiper-container navigation=\"true\" pagination=\"true\" scrollbar=\"true\">\n  <swiper-slide>Slide 1</swiper-slide>\n  <swiper-slide>Slide 2</swiper-slide>\n  <swiper-slide>Slide 3</swiper-slide>\n  ...\n</swiper-container>\n\nLazy\n\nIf you use lazy loading images, it requires the lazy preloader element to be added to the each slide. swiper-slide component can do this automatically by adding lazy=\"true\" attribute:\n\n<swiper-container>\n  <!-- lazy=\"true\" attribute will automatically render the preloader element -->\n  <swiper-slide lazy=\"true\">\n    <img src=\"...\" loading=\"lazy\" />\n  </swiper-slide>\n  <swiper-slide lazy=\"true\">\n    <img src=\"...\" loading=\"lazy\" />\n  </swiper-slide>\n  <swiper-slide lazy=\"true\">\n    <img src=\"...\" loading=\"lazy\" />\n  </swiper-slide>\n  ...\n</swiper-container>\n\nVirtual Slides\n\nWe have 2 options to use Virtual slides in Swiper web components.\n\nFirst option is to pass slides in virtual.slides array, but it will require to use element properties to initialize Swiper element:\n\n<swiper-container init=\"false\"></swiper-container>\n<script>\n  // swiper element\n  const swiperEl = document.querySelector('swiper-container');\n\n  // swiper parameters\n  const swiperParams = {\n    virtual: {\n      // virtual slides\n      slides: ['Slide 1', 'Slide 2', 'Slide 3'],\n    },\n  };\n\n  // assign all parameters to Swiper element\n  Object.assign(swiperEl, swiperParams);\n\n  // and now initialize it\n  swiperEl.initialize();\n</script>\n\n\nSince version 9, Swiper virtual slides can work with slides originally rendered in DOM. On initialize it will remove them from DOM, cache and then re-use the ones which are required:\n\n<!-- it is enough to add virtual=\"true\" attribute -->\n<swiper-container virtual=\"true\">\n  <swiper-slide>Slide 1</swiper-slide>\n  <swiper-slide>Slide 2</swiper-slide>\n  <swiper-slide>Slide 3</swiper-slide>\n  ...\n</swiper-container>\n\nThumbs\n\nIn version 9 thumbs.swiper parameter also accepts CSS Selector of the thumbs swiper. So to make both with Swiper elements we can use the following:\n\n<!-- main swiper, pass thumbs swiper as CSS selector -->\n<swiper-container thumbs-swiper=\".my-thumbs\"> ... </swiper-container>\n\n<!-- thumbs swiper -->\n<swiper-container class=\"my-thumbs\"> ... </swiper-container>\n\nController\n\nSame as with Thumbs, Controller in version 9 also accepts CSS Selector:\n\n<swiper-container class=\"swiper-1\" controller-control=\".swiper-2\">\n  ...\n</swiper-container>\n\n<swiper-container class=\"swiper-2\" controller-control=\".swiper-1\">\n  ...\n</swiper-container>\n\nInjecting Styles\n\nIf you need to add styles to shadow DOM scope, you can use injectStyles or injectStylesUrls parameters, e.g.:\n\n<swiper-container init=\"false\"> ... </swiper-container>\n<script type=\"module\">\n  import { register } from 'swiper/element/bundle';\n\n  register();\n\n  const swiperEl = document.querySelector('swiper-container');\n\n  const params = {\n    // array with CSS styles\n    injectStyles: [\n      `\n      :host(.red) .swiper-wrapper {\n        background-color: red;\n      }\n      `,\n    ],\n\n    // array with CSS urls\n    injectStylesUrls: ['path/to/one.css', 'path/to/two.css'],\n  };\n\n  Object.assign(swiperEl, params);\n\n  swiperEl.initialize();\n</script>\n\nCore Version & Modules\n\nThere is also Core version of Swiper element available (without additional modules).\n\nIt can be imported from node modules:\n\n// import function to register Swiper Core custom elements\nimport { register } from 'swiper/element';\n// register Swiper custom elements\nregister();\n\n\nTo add modules, we need to use modules parameter as usual to include modules scripts, and we also need to add modules styles globally and also inject modules styles to the shadow DOM\n\n<swiper-container init=\"false\"> ... </swiper-container>\n\n<script>\n  import { register } from 'swiper/element';\n  import { Navigation, Pagination } from 'swiper/modules';\n\n  register();\n\n  const swiperEl = document.querySelector('swiper-container');\n\n  const params = {\n    modules: [Navigation, Pagination],\n    // inject modules styles to shadow DOM\n    injectStylesUrls: [\n      'path/to/navigation-element.min.css',\n      'path/to/pagination-element.min.css',\n    ],\n  };\n\n  Object.assign(swiperEl, params);\n\n  swiperEl.initialize();\n</script>\n\n\nThere are following element module styles imports available:\n\nswiper/element/css/a11y - styles required for A11y module\nswiper/element/css/autoplay - styles required for Autoplay module\nswiper/element/css/controller - styles required for Controller module\nswiper/element/css/effect-cards - styles required for Cards Effect module\nswiper/element/css/effect-coverflow - styles required for Coverflow Effect module\nswiper/element/css/effect-creative - styles required for Creative Effect module\nswiper/element/css/effect-cube - styles required for Cube Effect module\nswiper/element/css/effect-fade - styles required for Fade Effect module\nswiper/element/css/effect-flip - styles required for Flip Effect module\nswiper/element/css/free-mode - styles required for Free Mode module\nswiper/element/css/grid - styles required for Grid module\nswiper/element/css/hash-navigation - styles required for Hash Navigation module\nswiper/element/css/history - styles required for History module\nswiper/element/css/keyboard - styles required for Keyboard module\nswiper/element/css/manipulation - styles required for Manipulation module\nswiper/element/css/mousewheel - styles required for Mousewheel module\nswiper/element/css/navigation - styles required for Navigation module\nswiper/element/css/pagination - styles required for Pagination module\nswiper/element/css/parallax - styles required for Parallax module\nswiper/element/css/scrollbar - styles required for Scrollbar module\nswiper/element/css/thumbs - styles required for Thumbs module\nswiper/element/css/virtual - styles required for Virtual module\nswiper/element/css/zoom - styles required for Zoom module\nSlots\n\nBy default all swiper-container children are rendered as children of .swiper-wrapper element. If you need to add elements before or after there are two slots available:\n\ncontainer-start - will be rendered before .swiper-wrapper\ncontainer-end - will be rendered after .swiper-wrapper\n<swiper-container>\n  <div slot=\"container-start\">Rendered before wrapper</div>\n  <div slot=\"container-end\">Rendered after wrapper</div>\n  <swiper-slide>Slide 1</swiper-slide>\n  <swiper-slide>Slide 2</swiper-slide>\n  <swiper-slide>Slide 3</swiper-slide>\n  ...\n</swiper-container>\n\nParts\n\nThere are following CSS parts are available for styling:\n\ncontainer - styles for <div class=\"swiper\">\nwrapper - styles for <div class=\"swiper-wrapper\">\nbutton-prev - styles for prev Navigation button <div class=\"swiper-button-prev\">\nbutton-next - styles for next Navigation button <div class=\"swiper-button-next\">\npagination - styles for prev Pagination container <div class=\"swiper-pagination\">\nbullet - styles for Pagination bullet element\nbullet-active - styles for active Pagination bullet element\nscrollbar - - styles for Scrollbar container <div class=\"swiper-scrollbar\">\n\nFor example:\n\nswiper-container::part(bullet-active) {\n  background-color: red;\n}\n\nRegister Parameters\n\nSince 9.1.0 there is a new global window.SwiperElementRegisterParams function to register new (or extra) params that are not part of default Swiper parameters. This may be required if you use Swiper element with some custom plugins which extend Swiper parameters.\n\n// register swiper-container HTMLElement props to be treated as Swiper parameters\nwindow.SwiperElementRegisterParams(['foo', 'bar']);\n\nconst swiperEl = document.querySelector('swiper-container');\n\nObject.assign(swiperEl, {\n  foo: 1,\n  bar: 2,\n});\n\nswiperEl.initialize();\n\nUsage with React\n\nReact doesn't fully supports web components yet (as for version 18). So the usage is basically the same as in HTML:\n\nimport { useRef, useEffect } from 'react';\nimport { register } from 'swiper/element/bundle';\n\nregister();\n\nexport const MyComponent = () => {\n  const swiperElRef = useRef(null);\n\n  useEffect(() => {\n    // listen for Swiper events using addEventListener\n    swiperElRef.current.addEventListener('swiperprogress', (e) => {\n      const [swiper, progress] = e.detail;\n      console.log(progress);\n    });\n\n    swiperElRef.current.addEventListener('swiperslidechange', (e) => {\n      console.log('slide changed');\n    });\n  }, []);\n\n  return (\n    <swiper-container\n      ref={swiperElRef}\n      slides-per-view=\"3\"\n      navigation=\"true\"\n      pagination=\"true\"\n    >\n      <swiper-slide>Slide 1</swiper-slide>\n      <swiper-slide>Slide 2</swiper-slide>\n      <swiper-slide>Slide 3</swiper-slide>\n      ...\n    </swiper-container>\n  );\n};\n\nUsage with Vue\n\nVue has full support for web components, including passing attributes as props and listening for custom events:\n\n<template>\n  <swiper-container\n    :slides-per-view=\"3\"\n    :space-between=\"spaceBetween\"\n    :centered-slides=\"true\"\n    :pagination=\"{\n      hideOnClick: true\n    }\"\n    :breakpoints=\"{\n      768: {\n        slidesPerView: 3,\n      },\n    }\"\n    @swiperprogress=\"onProgress\"\n    @swiperslidechange=\"onSlideChange\"\n  >\n    <swiper-slide>Slide 1</swiper-slide>\n    <swiper-slide>Slide 2</swiper-slide>\n    <swiper-slide>Slide 3</swiper-slide>\n  </swiper-container>\n</template>\n\n<script>\n  import { register } from 'swiper/element/bundle';\n\n  register();\n\n  export default function () {\n    setup() {\n      const spaceBetween = 10;\n      const onProgress = (e) => {\n        const [swiper, progress] = e.detail;\n        console.log(progress)\n      };\n\n      const onSlideChange = (e) => {\n        console.log('slide changed')\n      }\n\n      return {\n        spaceBetween,\n        onProgress,\n        onSlideChange,\n      };\n    }\n  }\n</script>\n\nUsage with Svelte\n\nSvelte has full support for web components, including passing attributes as props and listening for custom events:\n\n<script>\n  import { register } from 'swiper/element/bundle';\n\n  register();\n\n  const spaceBetween = 10;\n  const onProgress = (e) => {\n    const [swiper, progress] = e.detail;\n    console.log(progress)\n  };\n  const onSlideChange = (e) => {\n    console.log('slide changed')\n  }\n</script>\n\n<swiper-container\n  slides-per-view={3}\n  space-between={spaceBetween}\n  centered-slides={true}\n  pagination={{\n    hideOnClick: true,\n  }}\n  breakpoints={{\n    768: {\n      slidesPerView: 3,\n    },\n  }}\n  on:swiperprogress={onProgress}\n  on:swiperslidechange={onSlideChange}\n>\n  <swiper-slide>Slide 1</swiper-slide>\n  <swiper-slide>Slide 2</swiper-slide>\n  <swiper-slide>Slide 3</swiper-slide>\n</swiper-container>\n\nUsage with Solid\n\nSolid has full support for web components, including passing attributes as props and listening for custom events:\n\nimport { register } from 'swiper/element/bundle';\n\nregister();\n\nexport default () => {\n  const spaceBetween = 10;\n  const onProgress = (e) => {\n    const [swiper, progress] = e.detail;\n    console.log(progress);\n  };\n  const onSlideChange = (e) => {\n    console.log('slide changed');\n  };\n  return (\n    <swiper-container\n      slides-per-view={1}\n      space-between={spaceBetween}\n      centered-slides={true}\n      pagination={{\n        hideOnClick: true,\n      }}\n      breakpoints={{\n        768: {\n          slidesPerView: 3,\n        },\n      }}\n      onSwiperprogress={onProgress}\n      onSwiperslidechange={onSlideChange}\n    >\n      <swiper-slide>Slide 1</swiper-slide>\n      <swiper-slide>Slide 2</swiper-slide>\n      <swiper-slide>Slide 3</swiper-slide>\n    </swiper-container>\n  );\n};\n\nWhat next?\n\nAs you see it is really easy to integrate Swiper into your website or app. So here are your next steps:\n\nGo to API Documentation to learn more about all Swiper API and how to control it.\nLook at available Demos.\nIf you have questions about Swiper ask them in StackOverflow or Swiper Discussions.\nCreate issue on GitHub if you found a bug.\nIf you are looking for support, we have a private Discord support chat room for Swiper Patrons.\nEdit this page on GitHub\n2024 Â© Swiper by "
  }
]